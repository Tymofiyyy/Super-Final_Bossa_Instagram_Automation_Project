#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ChromeDriver
"""

import os
import sys
import platform
import subprocess
import requests
import zipfile
import tempfile
import shutil
from pathlib import Path


def get_chrome_version():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó Chrome"""
    try:
        if platform.system() == "Windows":
            # –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ —Ä–µ—î—Å—Ç—Ä
            try:
                import winreg
                key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                                   r"Software\Google\Chrome\BLBeacon")
                version, _ = winreg.QueryValueEx(key, "version")
                return version
            except:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫
                try:
                    result = subprocess.run([
                        'reg', 'query', 
                        'HKEY_CURRENT_USER\\Software\\Google\\Chrome\\BLBeacon', 
                        '/v', 'version'
                    ], capture_output=True, text=True, check=True)
                    
                    for line in result.stdout.split('\n'):
                        if 'version' in line:
                            return line.split()[-1]
                except:
                    pass
                
                # –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è Chrome
                try:
                    chrome_path = None
                    possible_paths = [
                        r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                        r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
                        os.path.expanduser(r"~\AppData\Local\Google\Chrome\Application\chrome.exe")
                    ]
                    
                    for path in possible_paths:
                        if os.path.exists(path):
                            chrome_path = path
                            break
                    
                    if chrome_path:
                        result = subprocess.run([chrome_path, '--version'], 
                                              capture_output=True, text=True, check=True)
                        return result.stdout.strip().split()[-1]
                except:
                    pass
                    
        else:  # Linux/Mac
            try:
                result = subprocess.run(['google-chrome', '--version'], 
                                      capture_output=True, text=True, check=True)
                return result.stdout.strip().split()[-1]
            except:
                try:
                    result = subprocess.run(['chromium-browser', '--version'], 
                                          capture_output=True, text=True, check=True)
                    return result.stdout.strip().split()[-1]
                except:
                    pass
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó Chrome: {e}")
    
    return None


def get_platform_info():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É"""
    system = platform.system()
    machine = platform.machine()
    
    if system == "Windows":
        if machine.endswith('64'):
            return "win64", "chromedriver-win64.zip", "chromedriver.exe"
        else:
            return "win32", "chromedriver-win32.zip", "chromedriver.exe"
    elif system == "Linux":
        if machine.endswith('64'):
            return "linux64", "chromedriver-linux64.zip", "chromedriver"
        else:
            return "linux32", "chromedriver-linux32.zip", "chromedriver"
    elif system == "Darwin":  # macOS
        if machine == "arm64":
            return "mac-arm64", "chromedriver-mac-arm64.zip", "chromedriver"
        else:
            return "mac-x64", "chromedriver-mac-x64.zip", "chromedriver"
    
    raise Exception(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {system} {machine}")


def download_chromedriver(version, platform_name, filename):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ChromeDriver"""
    try:
        # URL –¥–ª—è Chrome for Testing
        base_url = "https://storage.googleapis.com/chrome-for-testing-public"
        download_url = f"{base_url}/{version}/{platform_name}/{filename}"
        
        print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑: {download_url}")
        
        response = requests.get(download_url, timeout=30)
        response.raise_for_status()
        
        return response.content
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        
        # –°–ø—Ä–æ–±–∞ –∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–º URL (—Å—Ç–∞—Ä—ñ –≤–µ—Ä—Å—ñ—ó)
        try:
            # –î–ª—è —Å—Ç–∞—Ä–∏—Ö –≤–µ—Ä—Å—ñ–π Chrome
            major_version = version.split('.')[0]
            alt_url = f"https://chromedriver.storage.googleapis.com/{version}/chromedriver_{platform_name.replace('-', '_')}.zip"
            
            print(f"–°–ø—Ä–æ–±–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ URL: {alt_url}")
            
            response = requests.get(alt_url, timeout=30)
            response.raise_for_status()
            
            return response.content
            
        except Exception as e2:
            print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π URL —Ç–∞–∫–æ–∂ –Ω–µ –ø—Ä–∞—Ü—é—î: {e2}")
            raise e


def install_chromedriver(chrome_version=None):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ChromeDriver"""
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó Chrome
        if not chrome_version:
            chrome_version = get_chrome_version()
        
        if not chrome_version:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–µ—Ä—Å—ñ—é Chrome")
            print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ Google Chrome –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")
            return False
        
        print(f"üìã –í–µ—Ä—Å—ñ—è Chrome: {chrome_version}")
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        platform_name, filename, executable_name = get_platform_info()
        print(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform_name}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ChromeDriver
        print("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ChromeDriver...")
        zip_content = download_chromedriver(chrome_version, platform_name, filename)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
        with tempfile.TemporaryDirectory() as temp_dir:
            zip_path = os.path.join(temp_dir, filename)
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è zip —Ñ–∞–π–ª—É
            with open(zip_path, 'wb') as f:
                f.write(zip_content)
            
            # –†–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(temp_dir)
            
            # –ü–æ—à—É–∫ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            driver_path = None
            for root, dirs, files in os.walk(temp_dir):
                for file in files:
                    if file == executable_name or (file.startswith('chromedriver') and 
                                                 (file.endswith('.exe') or platform.system() != "Windows")):
                        driver_path = os.path.join(root, file)
                        break
                if driver_path:
                    break
            
            if not driver_path:
                print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª ChromeDriver")
                return False
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è
            install_dir = os.path.join(os.path.expanduser('~'), '.chromedriver')
            os.makedirs(install_dir, exist_ok=True)
            
            final_path = os.path.join(install_dir, executable_name)
            
            # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
            shutil.copy2(driver_path, final_path)
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–¥–ª—è Unix —Å–∏—Å—Ç–µ–º)
            if platform.system() != "Windows":
                os.chmod(final_path, 0o755)
            
            print(f"‚úÖ ChromeDriver –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {final_path}")
            
            # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            if test_chromedriver(final_path):
                print("‚úÖ ChromeDriver –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                
                # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ PATH (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
                add_to_path = input("–î–æ–¥–∞—Ç–∏ –¥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ PATH? (y/n): ").lower().strip()
                if add_to_path == 'y':
                    add_chromedriver_to_path(install_dir)
                
                return True
            else:
                print("‚ùå ChromeDriver –Ω–µ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                return False
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
        return False


def test_chromedriver(driver_path):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ChromeDriver"""
    try:
        print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ChromeDriver...")
        
        from selenium import webdriver
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.chrome.options import Options
        
        options = Options()
        options.add_argument("--headless")  # –ë–µ–∑ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        
        service = Service(driver_path)
        driver = webdriver.Chrome(service=service, options=options)
        
        # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç
        driver.get("https://www.google.com")
        title = driver.title
        driver.quit()
        
        print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {title}")
        return "Google" in title
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False


def add_chromedriver_to_path(install_dir):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è ChromeDriver –¥–æ PATH"""
    try:
        if platform.system() == "Windows":
            # –î–ª—è Windows - –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ PATH –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            import winreg
            
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, "Environment", 0, winreg.KEY_ALL_ACCESS)
            try:
                current_path, _ = winreg.QueryValueEx(key, "PATH")
            except FileNotFoundError:
                current_path = ""
            
            if install_dir not in current_path:
                new_path = f"{current_path};{install_dir}" if current_path else install_dir
                winreg.SetValueEx(key, "PATH", 0, winreg.REG_EXPAND_SZ, new_path)
                print(f"‚úÖ {install_dir} –¥–æ–¥–∞–Ω–æ –¥–æ PATH")
                print("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω")
            else:
                print("‚ÑπÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –≤–∂–µ –≤ PATH")
            
            winreg.CloseKey(key)
            
        else:
            # –î–ª—è Unix —Å–∏—Å—Ç–µ–º
            shell_rc = None
            shell = os.environ.get('SHELL', '/bin/bash')
            
            if 'bash' in shell:
                shell_rc = os.path.expanduser('~/.bashrc')
            elif 'zsh' in shell:
                shell_rc = os.path.expanduser('~/.zshrc')
            elif 'fish' in shell:
                shell_rc = os.path.expanduser('~/.config/fish/config.fish')
            
            if shell_rc:
                export_line = f'export PATH="$PATH:{install_dir}"'
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –¥–æ–¥–∞–Ω–æ
                try:
                    with open(shell_rc, 'r') as f:
                        content = f.read()
                    
                    if install_dir not in content:
                        with open(shell_rc, 'a') as f:
                            f.write(f'\n# ChromeDriver\n{export_line}\n')
                        print(f"‚úÖ {install_dir} –¥–æ–¥–∞–Ω–æ –¥–æ {shell_rc}")
                        print(f"‚ö†Ô∏è –í–∏–∫–æ–Ω–∞–π—Ç–µ: source {shell_rc} –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω–∞–ª")
                    else:
                        print("‚ÑπÔ∏è –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –≤–∂–µ –≤ PATH")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—Ç–∏ –¥–æ PATH: {e}")
                    print(f"–î–æ–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É: {export_line}")
            else:
                print(f"‚ö†Ô∏è –ù–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π shell, –¥–æ–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É: export PATH=\"$PATH:{install_dir}\"")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ PATH: {e}")


def clean_old_drivers():
    """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥—Ä–∞–π–≤–µ—Ä—ñ–≤"""
    try:
        # –û—á–∏—â–µ–Ω–Ω—è webdriver-manager –∫–µ—à—É
        wdm_cache = os.path.expanduser('~/.wdm')
        if os.path.exists(wdm_cache):
            shutil.rmtree(wdm_cache)
            print("üóëÔ∏è –û—á–∏—â–µ–Ω–æ –∫–µ—à webdriver-manager")
        
        # –û—á–∏—â–µ–Ω–Ω—è –Ω–∞—à–æ–≥–æ –∫–µ—à—É
        our_cache = os.path.expanduser('~/.chromedriver')
        if os.path.exists(our_cache):
            response = input(f"–í–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –¥—Ä–∞–π–≤–µ—Ä–∏ –∑ {our_cache}? (y/n): ").lower().strip()
            if response == 'y':
                shutil.rmtree(our_cache)
                print("üóëÔ∏è –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ñ –¥—Ä–∞–π–≤–µ—Ä–∏")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöó –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ChromeDriver –¥–ª—è Instagram Bot")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Chrome
    chrome_version = get_chrome_version()
    if chrome_version:
        print(f"‚úÖ Chrome –∑–Ω–∞–π–¥–µ–Ω–æ: {chrome_version}")
    else:
        print("‚ùå Chrome –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Google Chrome: https://www.google.com/chrome/")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Selenium
    try:
        import selenium
        print(f"‚úÖ Selenium: {selenium.__version__}")
    except ImportError:
        print("‚ùå Selenium –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install selenium")
        return
    
    print("\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
    print("1. –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ ChromeDriver")
    print("2. –¢–µ—Å—Ç—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π ChromeDriver")
    print("3. –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –¥—Ä–∞–π–≤–µ—Ä–∏")
    print("4. –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É")
    
    choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä (1-4): ").strip()
    
    if choice == "1":
        clean_old_drivers()
        install_chromedriver(chrome_version)
    elif choice == "2":
        driver_path = input("–®–ª—è—Ö –¥–æ ChromeDriver (–∞–±–æ Enter –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ): ").strip()
        if not driver_path:
            # –ü–æ—à—É–∫ —É —Å–∏—Å—Ç–µ–º–Ω–æ–º—É PATH
            import shutil as sh
            driver_path = sh.which('chromedriver')
            if not driver_path:
                print("‚ùå ChromeDriver –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ PATH")
                return
        
        if test_chromedriver(driver_path):
            print("‚úÖ ChromeDriver –ø—Ä–∞—Ü—é—î!")
        else:
            print("‚ùå ChromeDriver –Ω–µ –ø—Ä–∞—Ü—é—î")
    elif choice == "3":
        clean_old_drivers()
    elif choice == "4":
        platform_name, filename, executable_name = get_platform_info()
        print(f"\n‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É:")
        print(f"–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {platform.system()}")
        print(f"–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
        print(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ChromeDriver: {platform_name}")
        print(f"–§–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {filename}")
        print(f"–í–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª: {executable_name}")
        print(f"–í–µ—Ä—Å—ñ—è Chrome: {chrome_version}")
    else:
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")


if __name__ == "__main__":
    main()