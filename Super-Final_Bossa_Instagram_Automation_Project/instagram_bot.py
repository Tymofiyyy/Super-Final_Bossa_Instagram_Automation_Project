import time
import random
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from config import Config
from utils import AntiDetection

class InstagramBot:
    def __init__(self, username, password, proxy=None, browser_type="chrome"):
        self.username = username
        self.password = password
        self.proxy = proxy
        self.browser_type = browser_type.lower()  # ‚úÖ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞
        self.driver = None
        self.logged_in = False
        self.anti_detection = AntiDetection()
        self.dolphin_manager = None
        if self.browser_type == "dolphin anty":
            from utils import DolphinAntyManager
            self.dolphin_manager = DolphinAntyManager()
        self.setup_logging()

        
    def setup_logging(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(f'logs/{self.username}_bot.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(f'InstagramBot_{self.username}')
        
    def setup_driver(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞ –∑ –æ–±—Ö–æ–¥–æ–º –¥–µ—Ç–µ–∫—Ü—ñ—ó –∞–±–æ —á–µ—Ä–µ–∑ Dolphin Anty"""
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –±—Ä–∞—É–∑–µ—Ä–∞
        if self.browser_type.lower() == "dolphin anty":
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Dolphin
            if self.dolphin_manager and self.dolphin_manager.test_connection():
                return self.setup_dolphin_driver()
            else:
                self.logger.warning("‚ö†Ô∏è Dolphin Anty –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Chrome")
                self.browser_type = "chrome"
        
        # --- Chrome WebDriver (—Ä–µ—à—Ç–∞ –∫–æ–¥—É –±–µ–∑ –∑–º—ñ–Ω) ---

        # --- Chrome WebDriver ---
        chrome_options = Options()

        # –û–±—Ö—ñ–¥ –¥–µ—Ç–µ–∫—Ü—ñ—ó –±–æ—Ç—ñ–≤
        chrome_options.add_argument('--disable-blink-features=AutomationControlled')
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-plugins-discovery')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--no-sandbox')

        # –ú–æ–±—ñ–ª—å–Ω–∞ –µ–º—É–ª—è—Ü—ñ—è –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º User-Agent
        mobile_emulation = {
            "deviceMetrics": {"width": 375, "height": 667, "pixelRatio": 3.0},
            "userAgent": random.choice([
                "Mozilla/5.0 (Linux; Android 13; Pixel 6 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.207 Mobile Safari/537.36",
                "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1"
            ])
        }
        chrome_options.add_experimental_option("mobileEmulation", mobile_emulation)

        # –ü—Ä–æ–∫—Å—ñ (—è–∫—â–æ —î)
        if self.proxy:
            chrome_options.add_argument(f'--proxy-server={self.proxy}')

        # Headless (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–ª—è Instagram)
        if Config.HEADLESS:
            chrome_options.add_argument('--headless=new')  # 'new' —Ä–µ–∂–∏–º –∫—Ä–∞—â–µ –ø—Ä–∞—Ü—é—î

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Chrome WebDriver
        self.driver = webdriver.Chrome(options=chrome_options)

        # –û–±—Ö—ñ–¥ –≤–∏—è–≤–ª–µ–Ω–Ω—è webdriver —á–µ—Ä–µ–∑ Chrome DevTools Protocol
        self.driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
            "source": """
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined
                });
            """
        })

        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
        self.driver.set_window_size(375, 667)

        return self.driver

    def setup_dolphin_driver(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è Dolphin Anty"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
            profile_data = self.dolphin_manager.create_profile(self.username, self.proxy)
            
            if not profile_data:
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å Dolphin")
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ—ñ–ª—é
            automation_data = self.dolphin_manager.start_profile(self.username)
            
            if not automation_data:
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å Dolphin")
            
            # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebDriver —á–µ—Ä–µ–∑ Dolphin
            from selenium.webdriver.chrome.options import Options
            
            options = Options()
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            debugger_address = automation_data.get('ws', {}).get('selenium')
            if not debugger_address:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
                port = automation_data.get('port', 9222)
                debugger_address = f"127.0.0.1:{port}"
            
            options.add_experimental_option("debuggerAddress", debugger_address)
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥—Ä–∞–π–≤–µ—Ä–∞
            self.driver = webdriver.Chrome(options=options)
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
            self.driver.set_window_size(375, 667)
            
            self.logger.info(f"‚úÖ Dolphin Anty –ø—Ä–æ—Ñ—ñ–ª—å {self.username} –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            
            return self.driver
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Dolphin: {e}")
            # Fallback –Ω–∞ Chrome —è–∫—â–æ Dolphin –Ω–µ –ø—Ä–∞—Ü—é—î
            self.logger.warning("üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä...")
            self.browser_type = "chrome"
            return self.setup_driver()
        
        
    def human_like_delay(self, min_delay=1, max_delay=3):
        """–ó–∞—Ç—Ä–∏–º–∫–∞ –∑ —ñ–º—ñ—Ç–∞—Ü—ñ—î—é –ª—é–¥—Å—å–∫–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏"""
        delay = random.uniform(min_delay, max_delay)
        time.sleep(delay)
            
    def fast_typing(self, element, text):
        """–®–≤–∏–¥–∫–µ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è
            element.clear()
            time.sleep(0.2)
            
            # –§–æ–∫—É—Å –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ
            element.click()
            time.sleep(0.1)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–µ—Ä–µ–Ω–æ—Å —Ä—è–¥–∫—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ
            if '\n' in text:
                self.logger.info(f"üìù –ë–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {len(text.splitlines())} —Ä—è–¥–∫—ñ–≤")
                
                # –ú–µ—Ç–æ–¥ 1: –ü–æ—Å–∏–º–≤–æ–ª—å–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –∑ Shift+Enter
                lines = text.splitlines(keepends=False)  # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä—è–¥–∫–∏ –±–µ–∑ —Å–∏–º–≤–æ–ª—ñ–≤ –ø–µ—Ä–µ–Ω–æ—Å—É
                
                for i, line in enumerate(lines):
                    # –í–≤–æ–¥–∏–º–æ –∫–æ–∂–µ–Ω —Å–∏–º–≤–æ–ª —Ä—è–¥–∫–∞
                    for char in line:
                        element.send_keys(char)
                        time.sleep(random.uniform(0.01, 0.02))
                    
                    # –Ø–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ - –¥–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–Ω–æ—Å
                    if i < len(lines) - 1:
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ActionChains –¥–ª—è Shift+Enter
                        action = ActionChains(self.driver)
                        action.key_down(Keys.SHIFT).send_keys(Keys.ENTER).key_up(Keys.SHIFT).perform()
                        time.sleep(0.1)
                        self.logger.debug(f"‚ûï –î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å —Ä—è–¥–∫–∞ –ø—ñ—Å–ª—è: {line[:30]}...")
                        
                self.logger.info(f"‚úÖ –ë–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return True
                
            else:
                # –î–ª—è –æ–¥–Ω–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É - –ø—Ä–æ—Å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—è
                element.send_keys(text)
                self.logger.debug(f"‚úÖ –û–¥–Ω–æ—Ä—è–¥–∫–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—è: {text}")
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ —Ç–µ–∫—Å—Ç—É: {e}")
            
            # Fallback –º–µ—Ç–æ–¥ - —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
            try:
                import pyperclip
                pyperclip.copy(text)
                element.click()
                time.sleep(0.1)
                
                # Ctrl+V –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                action = ActionChains(self.driver)
                action.key_down(Keys.CONTROL).send_keys('v').key_up(Keys.CONTROL).perform()
                
                self.logger.info("‚úÖ –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É")
                return True
                
            except:
                # –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç - JavaScript
                try:
                    # –ï–∫—Ä–∞–Ω—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è JavaScript
                    js_text = text.replace('\\', '\\\\').replace('\n', '\\n').replace('\r', '').replace('"', '\\"').replace("'", "\\'")
                    
                    self.driver.execute_script("""
                        var element = arguments[0];
                        var text = arguments[1];
                        element.focus();
                        element.value = text;
                        element.dispatchEvent(new Event('input', { bubbles: true }));
                        element.dispatchEvent(new Event('change', { bubbles: true }));
                    """, element, text)
                    
                    self.logger.info("‚úÖ –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–æ —á–µ—Ä–µ–∑ JavaScript")
                    return True
                    
                except Exception as e3:
                    self.logger.error(f"‚ùå –í—Å—ñ –º–µ—Ç–æ–¥–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏: {e3}")
                    return False
        
    def validate_credentials(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –ª–æ–≥—ñ–Ω–∞ —ñ –ø–∞—Ä–æ–ª—è"""
        if not self.username or not self.password:
            self.logger.error("–õ–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ")
            return False
            
        if len(self.username) < 3:
            self.logger.error("–õ–æ–≥—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π")
            return False
            
        if len(self.password) < 6:
            self.logger.error("–ü–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π")
            return False
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏
        import re
        if not re.match("^[a-zA-Z0-9._]+$", self.username):
            self.logger.error("–õ–æ–≥—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏")
            return False
            
        self.logger.info(f"–õ–æ–≥—ñ–Ω {self.username} –ø—Ä–æ–π—à–æ–≤ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é")
        return True

    # === –ù–û–í–ò–ô –ú–ï–¢–û–î: –ü–ê–†–°–ò–ù–ì –ë–ê–ì–ê–¢–¨–û–• –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===
    def parse_target_users(self, target_input):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫—É —Ü—ñ–ª—å–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        # –Ø–∫—â–æ –≤–∂–µ —Å–ø–∏—Å–æ–∫ - –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
        if isinstance(target_input, list):
            cleaned_users = []
            for user in target_input:
                if isinstance(user, str):
                    user = user.strip().replace('@', '')
                    if user and len(user) > 0:
                        import re
                        if re.match("^[a-zA-Z0-9._]+$", user) and len(user) >= 1:
                            cleaned_users.append(user)
            self.logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –∑ {len(cleaned_users)} –≤–∞–ª—ñ–¥–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            return cleaned_users
        
        # –Ø–∫—â–æ —Ä—è–¥–æ–∫ - –ø–∞—Ä—Å–∏–º–æ –π–æ–≥–æ
        if not target_input or not isinstance(target_input, str):
            return []
        
        # –†—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ–≤
        separators = [',', ';', '\n', ' ']
        users = [target_input]
        
        for sep in separators:
            if sep in target_input:
                users = target_input.split(sep)
                break
        
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
        cleaned_users = []
        for user in users:
            user = user.strip().replace('@', '')  # –í–∏–¥–∞–ª—è—î–º–æ @ —è–∫—â–æ —î
            if user and len(user) > 0:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º—É Instagram
                import re
                if re.match("^[a-zA-Z0-9._]+$", user) and len(user) >= 1:
                    cleaned_users.append(user)
                else:
                    self.logger.warning(f"–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —é–∑–µ—Ä–Ω–µ–π–º: {user}")
        
        self.logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(cleaned_users)} –≤–∞–ª—ñ–¥–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {cleaned_users}")
        return cleaned_users
        
    def login(self):
        """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –≤—Ö—ñ–¥ –≤ –∞–∫–∞—É–Ω—Ç –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –í–°–Ü–• —Ç–∏–ø—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ Instagram"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
            if not self.validate_credentials():
                return False
                
            self.setup_driver()
            self.driver.get("https://www.instagram.com/accounts/login/")
            self.human_like_delay(3, 5)
            
            # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—Ö–æ–¥—É
            page_type = self.detect_login_page_type()
            self.logger.info(f"–í–∏—è–≤–ª–µ–Ω–æ —Ç–∏–ø —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—Ö–æ–¥—É: {page_type}")
            
            if page_type == "third_type_bloks":
                return self.login_third_type_bloks()
            elif page_type == "new_layout":
                return self.login_new_layout()
            elif page_type == "old_layout":
                return self.login_old_layout()
            else:
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏, –ø—Ä–æ–±—É—î–º–æ –≤—Å—ñ –º–µ—Ç–æ–¥–∏ –ø–æ—Å–ø—ñ–ª—å
                self.logger.info("–¢–∏–ø —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –ø—Ä–æ–±—É—î–º–æ –≤—Å—ñ –º–µ—Ç–æ–¥–∏ –ø–æ—Å–ø—ñ–ª—å")
                
                # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ —Ç—Ä–µ—Ç—ñ–π —Ç–∏–ø (–Ω–∞–π–Ω–æ–≤—ñ—à–∏–π)
                if self.login_third_type_bloks():
                    return True
                    
                # –ü–æ—Ç—ñ–º –Ω–æ–≤–∏–π —Ç–∏–ø
                if self.login_new_layout():
                    return True
                    
                # –ù–∞—Ä–µ—à—Ç—ñ —Å—Ç–∞—Ä–∏–π —Ç–∏–ø
                return self.login_old_layout()
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥—ñ: {e}")
            return False

    def detect_login_page_type(self):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—Ö–æ–¥—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ç—Ä–µ—Ç—å–æ–≥–æ —Ç–∏–ø—É (Bloks UI)"""
        try:
            # –û—á—ñ–∫—É—î–º–æ –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            self.human_like_delay(3, 5)
            
            # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —Ç—Ä–µ—Ç—å–æ–≥–æ —Ç–∏–ø—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–Ω–æ–≤–∏–π Bloks UI)
            third_type_indicators = [
                "div[data-bloks-name='bk.components.Flexbox']",
                "div[aria-label='–£–≤—ñ–π—Ç–∏']",
                "div[role='button'][aria-label='–£–≤—ñ–π—Ç–∏']",
                "div[class*='wbloks']",
                "div[data-bloks-name]"
            ]
            
            # –°–∏–ª—å–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó
            new_layout_strong = [
                "input[name='username']",
                "button[type='submit']"
            ]
            
            # –°–∏–ª—å–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —Å—Ç–∞—Ä–æ—ó –≤–µ—Ä—Å—ñ—ó
            old_layout_strong = [
                "input[aria-label*='Phone number, username, or email']",
                "div[role='button'][tabindex='0']"
            ]
            
            # –°–ª–∞–±–∫—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
            new_layout_weak = [
                "form[method='post']",
                "input[autocomplete='username']"
            ]
            
            old_layout_weak = [
                "div[role='button'] div[dir='auto']",
                "input[aria-label*='Username']"
            ]
            
            third_type_score = 0
            new_strong_score = 0
            old_strong_score = 0
            new_weak_score = 0
            old_weak_score = 0
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–µ—Ç—å–æ–≥–æ —Ç–∏–ø—É (Bloks UI) - –Ω–∞–π–≤–∏—â–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ—Å—Ç—å
            for selector in third_type_indicators:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if any(el.is_displayed() for el in elements):
                        third_type_score += 3  # –í–∏—Å–æ–∫–∞ –≤–∞–≥–∞ –¥–ª—è Bloks UI
                        self.logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ—Ç—å–æ–≥–æ —Ç–∏–ø—É: {selector}")
                except:
                    pass
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–ª—å–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó
            for selector in new_layout_strong:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if any(el.is_displayed() for el in elements):
                        new_strong_score += 2
                        self.logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó: {selector}")
                except:
                    pass
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–ª—å–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ —Å—Ç–∞—Ä–æ—ó –≤–µ—Ä—Å—ñ—ó
            for selector in old_layout_strong:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if any(el.is_displayed() for el in elements):
                        old_strong_score += 2
                        self.logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ä–æ—ó –≤–µ—Ä—Å—ñ—ó: {selector}")
                except:
                    pass
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ª–∞–±–∫–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó
            for selector in new_layout_weak:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if any(el.is_displayed() for el in elements):
                        new_weak_score += 1
                except:
                    pass
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ª–∞–±–∫–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ —Å—Ç–∞—Ä–æ—ó –≤–µ—Ä—Å—ñ—ó
            for selector in old_layout_weak:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if any(el.is_displayed() for el in elements):
                        old_weak_score += 1
                except:
                    pass
            
            new_total_score = new_strong_score + new_weak_score
            old_total_score = old_strong_score + old_weak_score
            
            self.logger.debug(f"–û—Ü—ñ–Ω–∫–∏: –¢—Ä–µ—Ç—ñ–π —Ç–∏–ø (Bloks) - {third_type_score}")
            self.logger.debug(f"–û—Ü—ñ–Ω–∫–∏: –ù–æ–≤–∞ –≤–µ—Ä—Å—ñ—è - {new_total_score} (—Å–∏–ª—å–Ω—ñ: {new_strong_score}, —Å–ª–∞–±–∫—ñ: {new_weak_score})")
            self.logger.debug(f"–û—Ü—ñ–Ω–∫–∏: –°—Ç–∞—Ä–∞ –≤–µ—Ä—Å—ñ—è - {old_total_score} (—Å–∏–ª—å–Ω—ñ: {old_strong_score}, —Å–ª–∞–±–∫—ñ: {old_weak_score})")
            
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ü—ñ–Ω–æ–∫
            if third_type_score > 0:  # –Ø–∫—â–æ —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ—Ç—å–æ–≥–æ —Ç–∏–ø—É
                return "third_type_bloks"
            elif new_strong_score > 0 and old_strong_score == 0:
                return "new_layout"
            elif old_strong_score > 0 and new_strong_score == 0:
                return "old_layout"
            # –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –º–∞—é—Ç—å —Å–∏–ª—å–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∞–±–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –º–∞—î - –¥–∏–≤–∏–º–æ—Å—å –∑–∞–≥–∞–ª—å–Ω—É –æ—Ü—ñ–Ω–∫—É
            elif new_total_score > old_total_score:
                return "new_layout"
            elif old_total_score > new_total_score:
                return "old_layout"
            else:
                # –Ø–∫—â–æ –æ—Ü—ñ–Ω–∫–∏ —Ä—ñ–≤–Ω—ñ - –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ URL —Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫—É
                page_source = self.driver.page_source.lower()
                if 'react' in page_source or 'webpack' in page_source:
                    self.logger.debug("–í–∏—è–≤–ª–µ–Ω–æ React/Webpack - –π–º–æ–≤—ñ—Ä–Ω–æ —Å—Ç–∞—Ä–∞ –≤–µ—Ä—Å—ñ—è")
                    return "old_layout"
                else:
                    self.logger.debug("–ù–µ –≤–∏—è–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –æ–∑–Ω–∞–∫ - –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –Ω–æ–≤–∞ –≤–µ—Ä—Å—ñ—è")
                    return "new_layout"
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {e}")
            return "unknown"

    def login_third_type_bloks(self):
        """–ù–û–í–ò–ô –º–µ—Ç–æ–¥ –¥–ª—è —Ç—Ä–µ—Ç—å–æ–≥–æ —Ç–∏–ø—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (Bloks UI) –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –∫–Ω–æ–ø–æ–∫ –ø–∞—Ä–æ–ª—è"""
        try:
            self.logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É –¥–ª—è —Ç—Ä–µ—Ç—å–æ–≥–æ —Ç–∏–ø—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (Bloks UI)")
            
            # –ü–æ—à—É–∫ –ø–æ–ª—è username –¥–ª—è —Ç—Ä–µ—Ç—å–æ–≥–æ —Ç–∏–ø—É
            username_selectors = [
                "input[name='username']",
                "input[placeholder*='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞']",
                "input[placeholder*='Phone number, username']",
                "input[autocomplete='username']",
                "input[type='text']"
            ]
            
            username_input = None
            for selector in username_selectors:
                try:
                    username_input = WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    if username_input.is_displayed():
                        self.logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ username: {selector}")
                        break
                except:
                    continue
            
            if not username_input:
                self.logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ username –≤ —Ç—Ä–µ—Ç—å–æ–º—É —Ç–∏–ø—ñ")
                return False
            
            # –ü–æ—à—É–∫ –ø–æ–ª—è password –¥–ª—è —Ç—Ä–µ—Ç—å–æ–≥–æ —Ç–∏–ø—É
            password_selectors = [
                "input[name='password']",
                "input[type='password']",
                "input[autocomplete='current-password']"
            ]
            
            password_input = None
            for selector in password_selectors:
                try:
                    password_input = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if password_input.is_displayed():
                        self.logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ password: {selector}")
                        break
                except:
                    continue
            
            if not password_input:
                self.logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ password –≤ —Ç—Ä–µ—Ç—å–æ–º—É —Ç–∏–ø—ñ")
                return False
            
            # –í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            self.logger.info("–í–≤–µ–¥–µ–Ω–Ω—è username...")
            username_input.clear()
            self.anti_detection.human_typing(username_input, self.username)
            self.human_like_delay(1, 2)
                
            self.logger.info("–í–≤–µ–¥–µ–Ω–Ω—è password...")
            password_input.clear()
            self.anti_detection.human_typing(password_input, self.password)
            self.human_like_delay(1, 2)
            
            # –ü–û–ö–†–ê–©–ï–ù–ò–ô –ü–û–®–£–ö –ö–ù–û–ü–ö–ò –í–•–û–î–£ –î–õ–Ø –¢–†–ï–¢–¨–û–ì–û –¢–ò–ü–£ –ó –í–ò–ö–õ–Æ–ß–ï–ù–ù–Ø–ú –ö–ù–û–ü–û–ö –ü–ê–†–û–õ–Ø
            login_button = None
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ—à—É–∫ –ø–æ aria-label (–Ω–∞–π—Ç–æ—á–Ω—ñ—à–∏–π) –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –∫–Ω–æ–ø–æ–∫ –ø–∞—Ä–æ–ª—è
            aria_label_selectors = [
                "div[role='button'][aria-label='–£–≤—ñ–π—Ç–∏']",
                "button[aria-label='–£–≤—ñ–π—Ç–∏']",
                "div[role='button'][aria-label='Log in']",
                "button[aria-label='Log in']",
                "div[role='button'][aria-label='Log In']",
                "button[aria-label='Log In']"
            ]
            
            for selector in aria_label_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if not element.is_displayed() or not element.is_enabled():
                            continue
                            
                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å —â–æ —Ü–µ –ù–ï –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–∏/–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å
                        aria_label = element.get_attribute('aria-label') or ''
                        element_text = element.get_attribute('textContent') or element.text or ''
                        
                        # –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –í–∏–∫–ª—é—á–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –ø–∞—Ä–æ–ª–µ–º
                        password_keywords = ['show', 'hide', '–ø–æ–∫–∞–∑–∞—Ç–∏', '–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏', 'password', '–ø–∞—Ä–æ–ª—å', 'show password', 'hide password']
                        if any(keyword.lower() in aria_label.lower() for keyword in password_keywords):
                            self.logger.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–∞—Ä–æ–ª—è: {aria_label}")
                            continue
                        
                        if any(keyword.lower() in element_text.lower() for keyword in password_keywords):
                            self.logger.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–∞—Ä–æ–ª—è –ø–æ —Ç–µ–∫—Å—Ç—É: {element_text}")
                            continue
                        
                        # –í–∏–∫–ª—é—á–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç—É –∞–±–æ –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
                        if len(element_text.strip()) > 50:  # –ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç
                            continue
                            
                        login_button = element
                        self.logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É –ø–æ aria-label: {selector}, —Ç–µ–∫—Å—Ç: '{element_text.strip()}'")
                        break
                    if login_button:
                        break
                except:
                    continue
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ—à—É–∫ –ø–æ Bloks —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ (—è–∫—â–æ aria-label –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤)
            if not login_button:
                bloks_selectors = [
                    "div[data-bloks-name='bk.components.Flexbox'][role='button'][tabindex='0']",
                    "div[data-bloks-name='bk.components.Flexbox'][role='button']",
                    "div[class*='wbloks'][role='button'][tabindex='0']",
                    "div[class*='wbloks'][role='button']"
                ]
                
                for selector in bloks_selectors:
                    try:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for element in elements:
                            if not element.is_displayed() or not element.is_enabled():
                                continue
                                
                            element_text = element.get_attribute('textContent') or element.text or ''
                            aria_label = element.get_attribute('aria-label') or ''
                            
                            # –í–∏–∫–ª—é—á–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä–æ–ª—è
                            password_keywords = ['show', 'hide', '–ø–æ–∫–∞–∑–∞—Ç–∏', '–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏', 'password', '–ø–∞—Ä–æ–ª—å']
                            if any(keyword.lower() in (element_text + aria_label).lower() for keyword in password_keywords):
                                self.logger.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–∞—Ä–æ–ª—è –≤ Bloks: {element_text}")
                                continue
                            
                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥—É
                            login_keywords = ['—É–≤—ñ–π—Ç–∏', 'log in', 'login', 'sign in']
                            if any(keyword.lower() in element_text.lower() for keyword in login_keywords):
                                login_button = element
                                self.logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É –ø–æ Bloks: {selector}, —Ç–µ–∫—Å—Ç: '{element_text.strip()}'")
                                break
                        if login_button:
                            break
                    except:
                        continue
            
            # –ú–µ—Ç–æ–¥ 3: –ü–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ—Ä—É—á –∑ –ø–æ–ª—è–º–∏ –≤–≤–æ–¥—É (–Ω–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–∏–π)
            if not login_button:
                try:
                    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ–æ—Ä–º—É –∞–±–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –ø–æ–ª—è–º–∏
                    form_container = password_input.find_element(By.XPATH, "./ancestor::form[1] | ./ancestor::div[contains(@class, '') or contains(@style, '')][3]")
                    
                    # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º—ñ
                    form_buttons = form_container.find_elements(By.CSS_SELECTOR, "button, div[role='button']")
                    
                    for button in form_buttons:
                        if not button.is_displayed() or not button.is_enabled():
                            continue
                            
                        button_text = button.get_attribute('textContent') or button.text or ''
                        aria_label = button.get_attribute('aria-label') or ''
                        
                        # –ö–†–ò–¢–ò–ß–ù–û: –í–∏–∫–ª—é—á–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä–æ–ª—è
                        password_keywords = ['show', 'hide', '–ø–æ–∫–∞–∑–∞—Ç–∏', '–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏', 'password', '–ø–∞—Ä–æ–ª—å']
                        if any(keyword.lower() in (button_text + aria_label).lower() for keyword in password_keywords):
                            self.logger.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–∞—Ä–æ–ª—è –≤ —Ñ–æ—Ä–º—ñ: {button_text}")
                            continue
                        
                        # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É
                        login_keywords = ['—É–≤—ñ–π—Ç–∏', 'log in', 'login']
                        if (any(keyword in button_text.lower() for keyword in login_keywords) or
                            any(keyword in aria_label.lower() for keyword in login_keywords) or
                            button.get_attribute('type') == 'submit'):
                            
                            login_button = button
                            self.logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É –≤ —Ñ–æ—Ä–º—ñ, —Ç–µ–∫—Å—Ç: '{button_text.strip()}'")
                            break
                            
                except Exception as e:
                    self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –≤ —Ñ–æ—Ä–º—ñ: {e}")
            
            # –°–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É
            if login_button:
                self.logger.info("–ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥—É (—Ç—Ä–µ—Ç—ñ–π —Ç–∏–ø)...")
                try:
                    # –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –∫–Ω–æ–ø–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                    self.driver.execute_script("arguments[0].scrollIntoView(true);", login_button)
                    self.human_like_delay(0.5, 1)
                    
                    # –°–ø–æ—á–∞—Ç–∫—É –∑–≤–∏—á–∞–π–Ω–∏–π –∫–ª—ñ–∫
                    login_button.click()
                    self.logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑–≤–∏—á–∞–π–Ω–∏–π –∫–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É")
                    
                except Exception as e:
                    self.logger.warning(f"–ó–≤–∏—á–∞–π–Ω–∏–π –∫–ª—ñ–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e}")
                    try:
                        # JavaScript –∫–ª—ñ–∫
                        self.driver.execute_script("arguments[0].click();", login_button)
                        self.logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ JavaScript –∫–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É")
                    except Exception as e2:
                        self.logger.warning(f"JavaScript –∫–ª—ñ–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e2}")
                        # –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç - Enter
                        password_input.send_keys(Keys.RETURN)
                        self.logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ Enter —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç")
            else:
                self.logger.info("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Enter...")
                password_input.send_keys(Keys.RETURN)
            
            return self.wait_for_login_result()
                
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç—Ä–µ—Ç—å–æ–º—É —Ç–∏–ø—ñ –≤—Ö–æ–¥—É: {e}")
            return False
            
    def login_new_layout(self):
        """–í—Ö—ñ–¥ –¥–ª—è –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –∫–Ω–æ–ø–æ–∫ –ø–∞—Ä–æ–ª—è"""
        try:
            self.logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É –¥–ª—è –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
            
            # –ü–æ—à—É–∫ –ø–æ–ª—è username (–Ω–æ–≤–∞ –≤–µ—Ä—Å—ñ—è)
            username_selectors = [
                "input[name='username']",
                "input[aria-label*='Phone number, username']",
                "input[placeholder*='Phone number, username']",
                "input[type='text']"
            ]
            
            username_input = None
            for selector in username_selectors:
                try:
                    username_input = WebDriverWait(self.driver, 5).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                    )
                    if username_input.is_displayed():
                        self.logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ username: {selector}")
                        break
                except:
                    continue
            
            if not username_input:
                self.logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ username –≤ –Ω–æ–≤—ñ–π –≤–µ—Ä—Å—ñ—ó")
                return False
            
            # –ü–æ—à—É–∫ –ø–æ–ª—è password (–Ω–æ–≤–∞ –≤–µ—Ä—Å—ñ—è)
            password_selectors = [
                "input[name='password']",
                "input[type='password']",
                "input[aria-label*='Password']"
            ]
            
            password_input = None
            for selector in password_selectors:
                try:
                    password_input = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if password_input.is_displayed():
                        self.logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ password: {selector}")
                        break
                except:
                    continue
            
            if not password_input:
                self.logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ password –≤ –Ω–æ–≤—ñ–π –≤–µ—Ä—Å—ñ—ó")
                return False
            
            # –í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            self.logger.info("–í–≤–µ–¥–µ–Ω–Ω—è username...")
            username_input.clear()
            self.anti_detection.human_typing(username_input, self.username)
            self.human_like_delay(1, 2)
                
            self.logger.info("–í–≤–µ–¥–µ–Ω–Ω—è password...")
            password_input.clear()
            self.anti_detection.human_typing(password_input, self.password)
            self.human_like_delay(1, 2)
            
            # –ü–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥—É (–Ω–æ–≤–∞ –≤–µ—Ä—Å—ñ—è) –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –∫–Ω–æ–ø–æ–∫ –ø–∞—Ä–æ–ª—è
            login_selectors = [
                "button[type='submit']",
                "div[role='button'][tabindex='0']",
                "//button[contains(text(), 'Log in')]",
                "//button[contains(text(), 'Log In')]",
                "//div[@role='button' and contains(text(), 'Log')]",
                "//button[contains(text(), '–£–≤—ñ–π—Ç–∏')]",
                "//div[@role='button' and contains(text(), '–£–≤—ñ–π—Ç–∏')]"
            ]
            
            login_button = None
            for selector in login_selectors:
                try:
                    if selector.startswith("//"):
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for element in elements:
                        if not element.is_displayed() or not element.is_enabled():
                            continue
                            
                        element_text = element.get_attribute('textContent') or element.text or ''
                        aria_label = element.get_attribute('aria-label') or ''
                        
                        # –í–∏–∫–ª—é—á–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä–æ–ª—è
                        password_keywords = ['show', 'hide', '–ø–æ–∫–∞–∑–∞—Ç–∏', '–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏', 'password', '–ø–∞—Ä–æ–ª—å']
                        if any(keyword.lower() in (element_text + aria_label).lower() for keyword in password_keywords):
                            self.logger.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–∞—Ä–æ–ª—è: {element_text}")
                            continue
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥—É
                        if (len(element_text.strip()) < 50 and 
                            (any(keyword in element_text.lower() for keyword in ['log in', 'log', 'sign in', 'enter', '—É–≤—ñ–π—Ç–∏']) or
                             element.get_attribute('type') == 'submit')):
                            
                            login_button = element
                            self.logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É: {selector}, —Ç–µ–∫—Å—Ç: '{element_text.strip()}'")
                            break
                    
                    if login_button:
                        break
                        
                except Exception as e:
                    self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
                    continue
            
            # –°–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É
            if login_button:
                self.logger.info("–ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ö–æ–¥—É...")
                login_button.click()
            else:
                self.logger.info("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Enter...")
                password_input.send_keys(Keys.RETURN)
            
            return self.wait_for_login_result()
                
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –Ω–æ–≤—ñ–π –≤–µ—Ä—Å—ñ—ó –≤—Ö–æ–¥—É: {e}")
            return False
            
    def login_old_layout(self):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –≤—Ö—ñ–¥ –¥–ª—è —Å—Ç–∞—Ä–æ—ó –≤–µ—Ä—Å—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –∫–Ω–æ–ø–æ–∫ –ø–∞—Ä–æ–ª—è"""
        try:
            self.logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É –¥–ª—è —Å—Ç–∞—Ä–æ—ó –≤–µ—Ä—Å—ñ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ä–æ—ó –≤–µ—Ä—Å—ñ—ó
            self.human_like_delay(2, 4)
            
            # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –ø–æ–ª—è username –¥–ª—è —Å—Ç–∞—Ä–æ—ó –≤–µ—Ä—Å—ñ—ó
            username_selectors = [
                "input[aria-label*='Phone number, username, or email']",
                "input[aria-label*='Phone number, username']", 
                "input[aria-label*='Username']",
                "input[placeholder*='Phone number, username, or email']",
                "input[placeholder*='Username']",
                "input[name='username']",
                "input[type='text']:first-of-type",
                "form input[type='text']"
            ]
            
            username_input = None
            for selector in username_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed() and element.is_enabled():
                            username_input = element
                            self.logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ username: {selector}")
                            break
                    if username_input:
                        break
                except Exception as e:
                    self.logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e}")
                    continue
            
            if not username_input:
                self.logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ username –≤ —Å—Ç–∞—Ä—ñ–π –≤–µ—Ä—Å—ñ—ó")
                return False
            
            # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –ø–æ–ª—è password –¥–ª—è —Å—Ç–∞—Ä–æ—ó –≤–µ—Ä—Å—ñ—ó
            password_selectors = [
                "input[aria-label*='Password']",
                "input[type='password']",
                "input[name='password']",
                "form input[type='password']"
            ]
            
            password_input = None
            for selector in password_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed() and element.is_enabled():
                            password_input = element
                            self.logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ password: {selector}")
                            break
                    if password_input:
                        break
                except Exception as e:
                    self.logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e}")
                    continue
            
            if not password_input:
                self.logger.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ password –≤ —Å—Ç–∞—Ä—ñ–π –≤–µ—Ä—Å—ñ—ó")
                return False
            
            # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –ø–µ—Ä–µ–¥ –≤–≤–µ–¥–µ–Ω–Ω—è–º
            try:
                username_input.clear()
                password_input.clear()
            except:
                pass
            
            # –í–≤–µ–¥–µ–Ω–Ω—è username –∑ —Ñ–æ–∫—É—Å–æ–º
            self.logger.info("–í–≤–µ–¥–µ–Ω–Ω—è username (—Å—Ç–∞—Ä–∞ –≤–µ—Ä—Å—ñ—è)...")
            try:
                username_input.click()  # –ö–ª—ñ–∫ –¥–ª—è —Ñ–æ–∫—É—Å—É
                self.human_like_delay(0.5, 1)
                self.anti_detection.human_typing(username_input, self.username)
            except Exception as e:
                self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ username: {e}")
                username_input.send_keys(self.username)
            
            self.human_like_delay(1, 2)
                
            # –í–≤–µ–¥–µ–Ω–Ω—è password –∑ —Ñ–æ–∫—É—Å–æ–º
            self.logger.info("–í–≤–µ–¥–µ–Ω–Ω—è password (—Å—Ç–∞—Ä–∞ –≤–µ—Ä—Å—ñ—è)...")
            try:
                password_input.click()  # –ö–ª—ñ–∫ –¥–ª—è —Ñ–æ–∫—É—Å—É
                self.human_like_delay(0.5, 1)
                self.anti_detection.human_typing(password_input, self.password)
            except Exception as e:
                self.logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ password: {e}")
                password_input.send_keys(self.password)
            
            self.human_like_delay(1, 2)
            
            # –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥—É –¥–ª—è —Å—Ç–∞—Ä–æ—ó –≤–µ—Ä—Å—ñ—ó –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º –∫–Ω–æ–ø–æ–∫ –ø–∞—Ä–æ–ª—è
            login_selectors = [
                # –¢–æ—á–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Log in"
                "//div[@role='button' and normalize-space(text())='Log in']",
                "//div[@role='button' and normalize-space(text())='Log In']",
                "//button[normalize-space(text())='Log in']",
                "//button[normalize-space(text())='Log In']",
                "//div[@role='button' and normalize-space(text())='–£–≤—ñ–π—Ç–∏']",
                "//button[normalize-space(text())='–£–≤—ñ–π—Ç–∏']",
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –∫–Ω–æ–ø–∫–∏
                "div[role='button'][tabindex='0']:has(div[dir='auto'])",
                "button[type='submit']",
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä–∏ –ø–æ –ø–æ–∑–∏—Ü—ñ—ó (–∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥—É –∑–∞–∑–≤–∏—á–∞–π –ø—ñ—Å–ª—è –ø–æ–ª—ñ–≤)
                "form div[role='button']:last-of-type",
                "div[role='button'][tabindex='0']:last-of-type"
            ]
            
            login_button = None
            for selector in login_selectors:
                try:
                    if selector.startswith("//"):
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for element in elements:
                        if not element.is_displayed() or not element.is_enabled():
                            continue
                            
                        element_text = element.get_attribute('textContent') or element.text or ""
                        aria_label = element.get_attribute('aria-label') or ""
                        
                        # –í–∏–∫–ª—é—á–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä–æ–ª—è
                        password_keywords = ['show', 'hide', '–ø–æ–∫–∞–∑–∞—Ç–∏', '–ø—Ä–∏—Ö–æ–≤–∞—Ç–∏', 'password', '–ø–∞—Ä–æ–ª—å']
                        if any(keyword.lower() in (element_text + aria_label).lower() for keyword in password_keywords):
                            self.logger.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–∞—Ä–æ–ª—è: {element_text}")
                            continue
                        
                        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–æ–≤–∂–∏–Ω—ñ —Ç–µ–∫—Å—Ç—É —Ç–∞ –∑–º—ñ—Å—Ç—É
                        if len(element_text.strip()) < 50:  # –ö–æ—Ä–æ—Ç—à–∏–π —Ç–µ–∫—Å—Ç
                            if any(keyword in element_text.lower() for keyword in ['log in', 'log', 'sign in', 'enter', '—É–≤—ñ–π—Ç–∏']):
                                login_button = element
                                self.logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É: {selector}, —Ç–µ–∫—Å—Ç: '{element_text.strip()}'")
                                break
                            elif element_text.strip() == "":  # –ö–Ω–æ–ø–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç—É, –∞–ª–µ –∑ role='button'
                                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ü–µ –Ω–µ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç
                                if element.get_attribute('tabindex') == '0':
                                    login_button = element
                                    self.logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É –±–µ–∑ —Ç–µ–∫—Å—Ç—É: {selector}")
                                    break
                    
                    if login_button:
                        break
                        
                except Exception as e:
                    self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
                    continue
            
            # –°–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
            if login_button:
                self.logger.info("–ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥—É (—Å—Ç–∞—Ä–∞ –≤–µ—Ä—Å—ñ—è)...")
                try:
                    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
                    if login_button.is_enabled():
                        # –°–∫—Ä–æ–ª–∏–º–æ –¥–æ –∫–Ω–æ–ø–∫–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                        self.driver.execute_script("arguments[0].scrollIntoView(true);", login_button)
                        self.human_like_delay(0.5, 1)
                        
                        # –ü—Ä–æ–±—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –∫–ª—ñ–∫
                        login_button.click()
                        self.logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑–≤–∏—á–∞–π–Ω–∏–π –∫–ª—ñ–∫")
                    else:
                        self.logger.warning("–ö–Ω–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Enter")
                        password_input.send_keys(Keys.RETURN)
                        
                except Exception as e:
                    self.logger.warning(f"–ó–≤–∏—á–∞–π–Ω–∏–π –∫–ª—ñ–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e}")
                    try:
                        # –ü—Ä–æ–±—É—î–º–æ JavaScript –∫–ª—ñ–∫
                        self.driver.execute_script("arguments[0].click();", login_button)
                        self.logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ JavaScript –∫–ª—ñ–∫")
                    except Exception as e2:
                        self.logger.warning(f"JavaScript –∫–ª—ñ–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e2}")
                        # –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç - Enter
                        password_input.send_keys(Keys.RETURN)
                        self.logger.info("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ Enter —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç")
            else:
                self.logger.info("–ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥—É –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π Enter...")
                password_input.send_keys(Keys.RETURN)
            
            return self.wait_for_login_result()
                
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Å—Ç–∞—Ä—ñ–π –≤–µ—Ä—Å—ñ—ó –≤—Ö–æ–¥—É: {e}")
            return False
            
    def wait_for_login_result(self):
        """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—Ö–æ–¥—É (—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥)"""
        try:
            self.logger.info("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤—Ö–æ–¥—É...")
            
            start_time = time.time()
            timeout = 30
            
            while time.time() - start_time < timeout:
                current_url = self.driver.current_url
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
                if current_url != "https://www.instagram.com/accounts/login/" and "login" not in current_url:
                    self.logger.info(f"URL –∑–º—ñ–Ω–∏–≤—Å—è –Ω–∞: {current_url}")
                    
                    if "challenge" in current_url:
                        self.logger.warning("–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ challenge –≤—Ä—É—á–Ω—É –≤ –±—Ä–∞—É–∑–µ—Ä—ñ...")
                        try:
                            WebDriverWait(self.driver, 300).until(
                                lambda d: "challenge" not in d.current_url and "login" not in d.current_url
                            )
                            self.logger.info("Challenge –ø—Ä–æ–π–¥–µ–Ω–æ –≤—Ä—É—á–Ω—É")
                            self.handle_post_login_dialogs()
                            self.logged_in = True
                            return True
                        except:
                            self.logger.error("Challenge –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ –≤—á–∞—Å–Ω–æ")
                            return False
                    
                    if "two_factor" in current_url or "2fa" in current_url:
                        self.logger.warning("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–≤–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è. –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –≤—Ä—É—á–Ω—É...")
                        try:
                            WebDriverWait(self.driver, 180).until(
                                lambda d: "two_factor" not in d.current_url and "login" not in d.current_url
                            )
                            self.logger.info("2FA –ø—Ä–æ–π–¥–µ–Ω–æ –≤—Ä—É—á–Ω—É")
                            self.handle_post_login_dialogs()
                            self.logged_in = True
                            return True
                        except:
                            self.logger.error("2FA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ –≤—á–∞—Å–Ω–æ")
                            return False
                        
                    # –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
                    self.handle_post_login_dialogs()
                    self.logged_in = True
                    self.logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –¥–ª—è {self.username}")
                    return True
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ –≤—Ö–æ–¥—É
                error_selectors = [
                    "div[role='alert']", 
                    "#slfErrorAlert", 
                    "div[data-testid='login-error']",
                    "p[data-testid='login-error-message']",
                    "div[id*='error']",
                    "div[class*='error']", 
                    "div[class*='Alert']", 
                    "div[class*='-message']", 
                    "span[class*='error']",
                    "span[data-testid='login-error-message']"
                ]
                
                for selector in error_selectors:
                    try:
                        error_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for error_el in error_elements:
                            if error_el.is_displayed() and error_el.text.strip():
                                error_text = error_el.text.strip()
                                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: {error_text}")
                                return False
                    except:
                        continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Home —ñ–∫–æ–Ω–∫–∏
                home_selectors = [
                    "svg[aria-label='Home']", 
                    "a[href='/']",
                    "div[data-testid='mobile-nav-home']",
                    "a[aria-label='Home']"
                ]
                
                for selector in home_selectors:
                    try:
                        home_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for home_el in home_elements:
                            if home_el.is_displayed():
                                self.logger.info("–ó–Ω–∞–π–¥–µ–Ω–æ Home –µ–ª–µ–º–µ–Ω—Ç - —É—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥")
                                self.handle_post_login_dialogs()
                                self.logged_in = True
                                self.logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –¥–ª—è {self.username}")
                                return True
                    except:
                        continue
                
                time.sleep(1)
            
            # Timeout
            current_url = self.driver.current_url
            self.logger.error(f"Timeout –ø—Ä–∏ –≤—Ö–æ–¥—ñ. –§—ñ–Ω–∞–ª—å–Ω–∏–π URL: {current_url}")
            
            # –û—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            if "login" not in current_url:
                self.logger.info("–ú–æ–∂–ª–∏–≤–æ –≤—Ö—ñ–¥ –≤—Å–µ –∂ —Ç–∞–∫–∏ —É—Å–ø—ñ—à–Ω–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ...")
                home_elements = self.driver.find_elements(By.CSS_SELECTOR, "svg[aria-label='Home'], a[href='/']")
                if home_elements and any(el.is_displayed() for el in home_elements):
                    self.handle_post_login_dialogs()
                    self.logged_in = True
                    self.logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –¥–ª—è {self.username} (–∑–∞—Ç—Ä–∏–º–∞–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞)")
                    return True
            
            return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: {e}")
            return False
            
    def handle_post_login_dialogs(self):
        """–û–±—Ä–æ–±–∫–∞ –¥—ñ–∞–ª–æ–≥—ñ–≤ –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É"""
        dialogs_handled = 0
        max_dialogs = 5
        
        self.logger.info("–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –¥—ñ–∞–ª–æ–≥—ñ–≤ –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É...")
        
        while dialogs_handled < max_dialogs:
            self.human_like_delay(1, 2)
            dialog_found = False
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—ñ–≤
            close_selectors = [
                "//button[contains(text(), 'Not Now')]",
                "//button[contains(text(), '–ù–µ –∑–∞—Ä–∞–∑')]",
                "//button[@aria-label='Close']",
                "svg[aria-label='Close']",
                "//button[contains(text(), 'Skip')]",
                "//button[contains(text(), 'Cancel')]"
            ]
            
            for selector in close_selectors:
                try:
                    if selector.startswith("//"):
                        elements = self.driver.find_elements(By.XPATH, selector)
                    else:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for element in elements:
                        if element.is_displayed() and element.is_enabled():
                            try:
                                element.click()
                                self.logger.info(f"–ó–∞–∫—Ä–∏—Ç–æ –¥—ñ–∞–ª–æ–≥: {selector}")
                                dialog_found = True
                                self.human_like_delay(1, 2)
                                break
                            except:
                                continue
                    
                    if dialog_found:
                        break
                        
                except:
                    continue
            
            if dialog_found:
                dialogs_handled += 1
            else:
                break
            
        self.logger.info(f"–û–±—Ä–æ–±–∫–∞ –¥—ñ–∞–ª–æ–≥—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–∫—Ä–∏—Ç–æ {dialogs_handled} –¥—ñ–∞–ª–æ–≥—ñ–≤")
        
        # –§—ñ–Ω–∞–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è —á–µ—Ä–µ–∑ Escape
        try:
            remaining_dialogs = self.driver.find_elements(By.CSS_SELECTOR, "div[role='dialog']")
            if remaining_dialogs:
                ActionChains(self.driver).send_keys(Keys.ESCAPE).perform()
        except:
            pass

    def like_recent_posts(self, target_username, count=2):
        """–õ–∞–π–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            profile_url = f"https://www.instagram.com/{target_username}/"
            self.driver.get(profile_url)
            self.logger.info(f"üìç –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å {target_username}")
            self.human_like_delay(3, 5)
            
            # –ü–æ—à—É–∫ –ø–æ—Å—Ç—ñ–≤ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ
            post_selectors = [
                "article a[href*='/p/']",
                "div[style*='padding-bottom'] a[href*='/p/']",
                "a[href*='/p/']"
            ]
            
            posts = []
            for selector in post_selectors:
                try:
                    found_posts = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if found_posts:
                        posts = found_posts[:count]
                        self.logger.info(f"üì∏ –ó–Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –ª–∞–π–∫—É")
                        break
                except:
                    continue
            
            if not posts:
                self.logger.warning(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç—ñ–≤ —É –ø—Ä–æ—Ñ—ñ–ª—ñ {target_username}")
                return False
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –ø–æ—Å—Ç–∏
            post_links = []
            for post in posts:
                try:
                    href = post.get_attribute('href')
                    if href:
                        post_links.append(href)
                except:
                    continue
            
            if not post_links:
                self.logger.warning("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç–∏")
                return False
            
            self.logger.info(f"üîó –û—Ç—Ä–∏–º–∞–Ω–æ {len(post_links)} –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –ø–æ—Å—Ç–∏")
            liked_count = 0
            
            # –õ–∞–π–∫ –∫–æ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é
            for i, post_url in enumerate(post_links):
                try:
                    self.logger.info(f"üì∏ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Å—Ç {i+1}/{len(post_links)}")
                    
                    # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø–æ—Å—Ç–∞
                    self.driver.get(post_url)
                    self.human_like_delay(3, 5)
                    
                    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–∞
                    try:
                        WebDriverWait(self.driver, 10).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, "article"))
                        )
                    except:
                        self.logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {i+1} –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è")
                        continue
                    
                    # –ü–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞
                    like_selectors = [
                        "svg[aria-label='Like']",
                        "svg[aria-label='–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è']", 
                        "button svg[aria-label*='Like']",
                        "span[role='button'] svg[aria-label='Like']"
                    ]
                    
                    like_button = None
                    for selector in like_selectors:
                        try:
                            like_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                            for like_el in like_elements:
                                if like_el.is_displayed():
                                    like_button = like_el
                                    break
                            if like_button:
                                break
                        except:
                            continue
                    
                    if like_button:
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Å—Ç –≤–∂–µ –ª–∞–π–∫–Ω—É—Ç–∏–π
                        aria_label = like_button.get_attribute('aria-label') or ""
                        
                        if 'Unlike' in aria_label or '–ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è' in aria_label:
                            self.logger.info(f"‚ÑπÔ∏è –ü–æ—Å—Ç {i+1} –≤–∂–µ –ª–∞–π–∫–Ω—É—Ç–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                        else:
                            # –°–ø—Ä–æ–±–∞ –ª–∞–π–∫—É
                            try:
                                parent_button = like_button.find_element(By.XPATH, "./ancestor::*[@role='button' or @tabindex='0'][1]")
                                parent_button.click()
                                self.logger.info(f"‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞ {i+1} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_username}")
                                liked_count += 1
                            except:
                                try:
                                    self.driver.execute_script("arguments[0].click();", like_button)
                                    self.logger.info(f"‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞ {i+1} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_username} (JS)")
                                    liked_count += 1
                                except:
                                    self.logger.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç {i+1}")
                        
                        # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –ª–∞–π–∫–∞
                        self.human_like_delay(2, 4)
                    else:
                        self.logger.warning(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ {i+1}")
                    
                    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é (–∑–∞–≤–∂–¥–∏ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç–∞)
                    self.logger.info(f"üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –ø—ñ—Å–ª—è –ø–æ—Å—Ç–∞ {i+1}")
                    self.driver.get(profile_url)
                    self.human_like_delay(2, 3)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ—Å—Ç–∞ {i+1}: {e}")
                    # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —Ç–∞–∫–æ–∂ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é
                    try:
                        self.driver.get(profile_url)
                        self.human_like_delay(2, 3)
                    except:
                        pass
                    continue
                    
            self.logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∞–π–∫–∏ –ø–æ—Å—Ç—ñ–≤: {liked_count}/{len(post_links)} —É—Å–ø—ñ—à–Ω–æ")
            return liked_count > 0
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–∞–π–∫—É –ø–æ—Å—Ç—ñ–≤: {e}")
            return False

    def _send_story_reply(self, reply_input, message):
        """–ù–∞–¥—ñ–π–Ω–∏–π –º–µ—Ç–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å—Ç–æ—Ä—ñ—Å"""
        try:
            # –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ —ñ –≤–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            reply_input.clear()
            reply_input.send_keys(message)
            self.logger.info(f"üí¨ –í–≤–µ–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
            
            # –ß–µ–∫–∞—î–º–æ —â–æ–± –∫–Ω–æ–ø–∫–∞ Send —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—é (–∑'—è–≤–ª—è—î—Ç—å—Å—è –ø—ñ—Å–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É)
            self.human_like_delay(1, 2)
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ Send –∑ —Ç–µ–∫—Å—Ç–æ–º "Send"
            try:
                # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ —Ç–µ–∫—Å—Ç–æ–º "Send"
                send_buttons = self.driver.find_elements(By.XPATH, "//button[contains(text(), 'Send')] | //div[@role='button'][contains(text(), 'Send')]")
                
                for btn in send_buttons:
                    if btn.is_displayed() and btn.is_enabled():
                        try:
                            btn.click()
                            self.logger.info("üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ—à—É–∫ –ø–æ —Ç–µ–∫—Å—Ç—É Send)")
                            return True
                        except Exception as e:
                            self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∫–ª—ñ–∫—É: {e}")
                            continue
                            
            except Exception as e:
                self.logger.debug(f"–ú–µ—Ç–æ–¥ 1 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ—à—É–∫ —á–µ—Ä–µ–∑ JavaScript –∑ —Ç–æ—á–Ω–∏–º –ø–æ—à—É–∫–æ–º –∫–Ω–æ–ø–∫–∏ "Send"
            try:
                sent = self.driver.execute_script("""
                    const input = arguments[0];
                    const inputRect = input.getBoundingClientRect();
                    
                    // –®—É–∫–∞—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
                    const allButtons = document.querySelectorAll('button, div[role="button"]');
                    
                    for (let btn of allButtons) {
                        const btnRect = btn.getBoundingClientRect();
                        
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å
                        if (btnRect.width === 0 || btnRect.height === 0) continue;
                        
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                        const btnText = btn.textContent || btn.innerText || '';
                        
                        if (btnText.includes('Send')) {
                            // –ö–Ω–æ–ø–∫–∞ –º–∞—î –±—É—Ç–∏ –≤ –ø—Ä–∞–≤–æ–º—É –Ω–∏–∂–Ω—å–æ–º—É –∫—É—Ç—ñ –≤—ñ–¥ –ø–æ–ª—è –≤–≤–æ–¥—É
                            if (btnRect.left >= inputRect.right - 100 && 
                                btnRect.top >= inputRect.bottom - 50) {
                                
                                console.log('–ó–Ω–∞–π—à–ª–∏ –∫–Ω–æ–ø–∫—É Send:', btnText, btnRect);
                                
                                try {
                                    btn.click();
                                    return true;
                                } catch (e) {
                                    console.log('Click failed:', e);
                                }
                            }
                        }
                    }
                    return false;
                """, reply_input)
                
                if sent:
                    self.logger.info("üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ (JavaScript –ø–æ—à—É–∫)")
                    return True
                    
            except Exception as e:
                self.logger.debug(f"–ú–µ—Ç–æ–¥ 2 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e}")
            
            # –ú–µ—Ç–æ–¥ 3: –ü–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ –ø–æ–ª—è –≤–≤–æ–¥—É
            try:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è –≤–≤–æ–¥—É
                parent_container = reply_input.find_element(By.XPATH, "./ancestor::div[contains(@class, '') or contains(@style, '')]")
                
                # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
                buttons = parent_container.find_elements(By.CSS_SELECTOR, "button, div[role='button']")
                
                for btn in buttons:
                    if not btn.is_displayed() or not btn.is_enabled():
                        continue
                    
                    btn_text = btn.text or btn.get_attribute('innerText') or ''
                    
                    if 'Send' in btn_text:
                        try:
                            btn.click()
                            self.logger.info("üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ—à—É–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ)")
                            return True
                        except Exception as e:
                            self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∫–ª—ñ–∫—É: {e}")
                            continue
                            
            except Exception as e:
                self.logger.debug(f"–ú–µ—Ç–æ–¥ 3 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e}")
            
            # –ú–µ—Ç–æ–¥ 4: –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø–æ–∑–∏—Ü—ñ—ó
            try:
                all_buttons = self.driver.find_elements(By.CSS_SELECTOR, "button, div[role='button']")
                input_rect = reply_input.rect
                
                for btn in all_buttons:
                    if not btn.is_displayed():
                        continue
                    
                    btn_rect = btn.rect
                    btn_text = btn.text or ''
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–Ω–æ–ø–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–æ–º—É –Ω–∏–∂–Ω—å–æ–º—É –∫—É—Ç—ñ –≤—ñ–¥ –ø–æ–ª—è –≤–≤–æ–¥—É
                    if (btn_rect['x'] >= input_rect['x'] + input_rect['width'] - 100 and
                        btn_rect['y'] >= input_rect['y'] + input_rect['height'] - 50 and
                        'Send' in btn_text):
                        
                        try:
                            btn.click()
                            self.logger.info("üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ (—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫)")
                            return True
                        except Exception as e:
                            self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∫–ª—ñ–∫—É: {e}")
                            continue
                            
            except Exception as e:
                self.logger.debug(f"–ú–µ—Ç–æ–¥ 4 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return False

    def process_story(self, target_username, messages):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ—Å"""
        try:
            # –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å
            self.driver.get(f"https://www.instagram.com/{target_username}/")
            self.logger.info(f"üìç –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å {target_username}")
            self.human_like_delay(2, 3)

            # –ü–æ—à—É–∫ —Å—Ç–æ—Ä—ñ—Å
            story_selectors = [
                "button canvas[style*='border']",
                "div[style*='border'] button",
                "img[style*='border']",
                "button[aria-label*='story']",
                "div[role='button'][tabindex='0']"
            ]
            
            story_found = False
            for selector in story_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed():
                            element.click()
                            self.logger.info(f"üì± –°—Ç–æ—Ä—ñ—Å –≤—ñ–¥–∫—Ä–∏—Ç–∞ —á–µ—Ä–µ–∑: {selector}")
                            story_found = True
                            break
                    if story_found:
                        break
                except Exception as e:
                    self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
                    continue

            if not story_found:
                self.logger.info("üì≠ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–æ—Ä—ñ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False

            self.human_like_delay(1, 2)

            # –õ–∞–π–∫ —Å—Ç–æ—Ä—ñ—Å
            like_success = False
            like_selectors = [
                "svg[aria-label='Like']",
                "svg[aria-label='–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è']",
                "button[aria-label*='Like']"
            ]
            
            for selector in like_selectors:
                try:
                    like_btn = WebDriverWait(self.driver, 3).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    if 'Unlike' not in (like_btn.get_attribute('aria-label') or ''):
                        like_btn.click()
                        self.logger.info("‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                        like_success = True
                        break
                except:
                    continue

            # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å—Ç–æ—Ä—ñ—Å
            reply_success = False
            reply_selectors = [
                "textarea[placeholder*='Send message']",
                "textarea[placeholder*='Reply']",
                "textarea[placeholder*='–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏']",
                "div[contenteditable='true']"
            ]
            
            for selector in reply_selectors:
                try:
                    reply_input = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    
                    message = random.choice(messages)
                    reply_input.click()
                    self.human_like_delay(0.5, 1)
                    
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                    if self._send_story_reply(reply_input, message):
                        reply_success = True
                        break
                        
                except Exception as e:
                    self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –∑ –ø–æ–ª–µ–º –≤–≤–æ–¥—É {selector}: {e}")
                    continue

            if not reply_success:
                self.logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

            # –í–ê–ñ–õ–ò–í–û: –ß–ï–ö–ê–Ñ–ú–û 5 –°–ï–ö–£–ù–î –ü–Ü–°–õ–Ø –í–°–Ü–• –î–Ü–ô (–ù–ï–ó–ê–õ–ï–ñ–ù–û –í–Ü–î –†–ï–ó–£–õ–¨–¢–ê–¢–£)
            self.logger.info("‚è≥ –û–±–æ–≤'—è–∑–∫–æ–≤–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è 5 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –¥—ñ–π –≤ —Å—Ç–æ—Ä—ñ—Å...")
            time.sleep(5)
            self.logger.info("‚úÖ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

            # –¢—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–æ—Ä—ñ—Å
            self._close_story()
            
            self.logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return like_success or reply_success

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Å—Ç–æ—Ä—ñ—Å: {e}")
            return False

    def _close_story(self):
        """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ—Å"""
        try:
            close_methods = [
                lambda: self.driver.find_element(By.CSS_SELECTOR, "svg[aria-label='Close']").click(),
                lambda: self.driver.find_element(By.CSS_SELECTOR, "button[aria-label='Close']").click(),
                lambda: ActionChains(self.driver).send_keys(Keys.ESCAPE).perform(),
                lambda: ActionChains(self.driver).move_by_offset(50, 50).click().perform()
            ]
            
            for method in close_methods:
                try:
                    method()
                    self.human_like_delay(1, 2)
                    self.logger.info("üì± –°—Ç–æ—Ä—ñ—Å –∑–∞–∫—Ä–∏—Ç–∞")
                    return True
                except:
                    continue
                    
            self.logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä–∏—Ç–∏ —Å—Ç–æ—Ä—ñ—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Å—Ç–æ—Ä—ñ—Å: {e}")
            return False
    
    def send_direct_message(self, target_username, messages):
        """Fallback: —è–∫—â–æ —Å—Ç–æ—Ä—ñ—Å –Ω–µ–º–∞—î ‚Üí Direct Messages ‚Üí Next ‚Üí –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        try:
            self.logger.info(f"üí¨ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ Direct Message –¥–ª—è {target_username}")
            
            # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ Direct Messages
            dm_url = "https://www.instagram.com/direct/new/"
            self.driver.get(dm_url)
            self.human_like_delay(3, 5)
            
            # –Ø–∫—â–æ direct/new –Ω–µ –ø—Ä–∞—Ü—é—î, –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ inbox
            if "direct/new" not in self.driver.current_url:
                self.logger.info("üí¨ –ü–µ—Ä–µ—Ö—ñ–¥ —á–µ—Ä–µ–∑ inbox")
                dm_url = "https://www.instagram.com/direct/inbox/"
                self.driver.get(dm_url)
                self.human_like_delay(3, 5)
                
                # –ü–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                new_message_selectors = [
                    "svg[aria-label='New message']",
                    "button[aria-label='New message']",
                    "//div[contains(text(), 'New message')]",
                    "//button[contains(text(), 'New message')]"
                ]
                
                for selector in new_message_selectors:
                    try:
                        if selector.startswith("//"):
                            new_message_button = WebDriverWait(self.driver, 5).until(
                                EC.element_to_be_clickable((By.XPATH, selector))
                            )
                        else:
                            new_message_button = WebDriverWait(self.driver, 5).until(
                                EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                            )
                        new_message_button.click()
                        self.human_like_delay(2, 3)
                        break
                    except:
                        continue
            
            # –ü–æ—à—É–∫ –ø–æ–ª—è –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            search_selectors = [
                "input[placeholder*='Search']",
                "input[name='queryBox']",
                "input[aria-label*='Search']",
                "div[contenteditable='true']",
                "input[placeholder*='search']",
                "input[type='text']"
            ]
            
            search_input = None
            for selector in search_selectors:
                try:
                    search_input = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    break
                except:
                    continue
            
            if not search_input:
                self.logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
                return False
            
            # –í–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            self.logger.info(f"üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {target_username}")
            search_input.clear()
            self.anti_detection.human_typing(search_input, target_username)
            self.human_like_delay(2, 3)
            
            # –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            user_found = False
            
            # –°–ø–æ—á–∞—Ç–∫—É —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥
            try:
                exact_user = WebDriverWait(self.driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, f"//span[text()='{target_username}']"))
                )
                exact_user.click()
                user_found = True
                self.logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {target_username}")
            except:
                # –ß–∞—Å—Ç–∫–æ–≤–∏–π –∑–±—ñ–≥ 
                try:
                    user_elements = self.driver.find_elements(By.CSS_SELECTOR, "div[role='button'] span")
                    for element in user_elements:
                        if element.text and target_username.lower() in element.text.lower():
                            parent = element.find_element(By.XPATH, "./ancestor::div[@role='button'][1]")
                            parent.click()
                            user_found = True
                            self.logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {element.text}")
                            break
                except:
                    pass
            
            if not user_found:
                self.logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {target_username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                return False
            
            self.human_like_delay(2, 3)
            
            # –ü–û–ö–†–ê–©–ï–ù–ò–ô –ü–û–®–£–ö –ö–ù–û–ü–ö–ò "NEXT"
            next_button_found = False
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ Next –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ–ª—è –ø–æ—à—É–∫—É
            try:
                search_container = search_input.find_element(By.XPATH, "./ancestor::div[3]")
                next_selectors_relative = [
                    ".//button[contains(text(), 'Next')]",
                    ".//div[@role='button'][contains(text(), 'Next')]",
                    ".//button[contains(text(), '–î–∞–ª—ñ')]",
                    ".//div[@role='button'][contains(text(), '–î–∞–ª—ñ')]"
                ]
                
                for selector in next_selectors_relative:
                    try:
                        next_button = search_container.find_element(By.XPATH, selector)
                        if next_button.is_displayed() and next_button.is_enabled():
                            next_button.click()
                            next_button_found = True
                            self.logger.info("‚úÖ –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É Next (–≤—ñ–¥–Ω–æ—Å–Ω–∏–π –ø–æ—à—É–∫)")
                            break
                    except:
                        continue
                        
            except Exception as e:
                self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ—Å–Ω–æ–≥–æ –ø–æ—à—É–∫—É Next: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ Next
            if not next_button_found:
                next_selectors_global = [
                    "//div[@role='button'][contains(text(), 'Next')]",
                    "//button[contains(text(), 'Next')]",
                    "//div[@role='button'][contains(text(), '–î–∞–ª—ñ')]",
                    "//button[contains(text(), '–î–∞–ª—ñ')]"
                ]
                
                for selector in next_selectors_global:
                    try:
                        next_button = WebDriverWait(self.driver, 3).until(
                            EC.element_to_be_clickable((By.XPATH, selector))
                        )
                        if next_button.is_displayed():
                            next_button.click()
                            next_button_found = True
                            self.logger.info("‚úÖ –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É Next (–≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫)")
                            break
                    except:
                        continue
            
            # –û–±—Ä–æ–±–∫–∞ –≤—ñ–∫–Ω–∞, —â–æ –º–æ–∂–µ –∑'—è–≤–∏—Ç–∏—Å—è –ø—ñ—Å–ª—è Next
            if next_button_found:
                self.human_like_delay(2, 3)
                try:
                    # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —ñ –∑–∞–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ "Not Now"
                    not_now_buttons = [
                        "//button[contains(text(), 'Not Now')]",
                        "//div[@role='button'][contains(text(), 'Not Now')]",
                        "//button[contains(text(), '–ù–µ –∑–∞—Ä–∞–∑')]",
                        "//div[@role='button'][contains(text(), '–ù–µ –∑–∞—Ä–∞–∑')]"
                    ]
                    
                    for selector in not_now_buttons:
                        try:
                            not_now_btn = WebDriverWait(self.driver, 3).until(
                                EC.element_to_be_clickable((By.XPATH, selector))
                            )
                            if not_now_btn.is_displayed():
                                not_now_btn.click()
                                self.logger.info("‚úÖ –ó–∞–∫—Ä–∏—Ç–æ –≤—ñ–∫–Ω–æ 'Not Now'")
                                self.human_like_delay(1, 2)
                                break
                        except:
                            continue
                except Exception as e:
                    self.logger.debug(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è: {e}")
            
            # –ü–æ—à—É–∫ –ø–æ–ª—è –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_selectors = [
                "textarea[placeholder*='Message']",
                "div[contenteditable='true'][aria-label*='Message']",
                "div[contenteditable='true']",
                "textarea[aria-label*='Message']"
            ]
            
            message_input = None
            for selector in message_selectors:
                try:
                    message_input = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    break
                except:
                    continue
            
            if not message_input:
                self.logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                return False
            
            message = random.choice(messages)
            self.logger.info(f"üí¨ –í–∏–±—Ä–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ({len(message.splitlines())} —Ä—è–¥–∫—ñ–≤):")
            for i, line in enumerate(message.splitlines()):
                self.logger.info(f"   –†—è–¥–æ–∫ {i+1}: {line}")

            # –í–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            self.logger.info(f"üí¨ –í–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")

            message_input.clear()
            self.fast_typing(message_input, message)
            self.human_like_delay(0.5, 1)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            try:
                message_input.send_keys(Keys.RETURN)
                self.logger.info(f"‚úÖ Direct Message –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {target_username}")
                return True
            except:
                try:
                    send_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
                    send_button.click()
                    self.logger.info(f"‚úÖ Direct Message –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {target_username}")
                    return True
                except:
                    self.logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                    return False

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ Direct Message: {e}")
            return False

    # === –ù–û–í–ò–ô –ú–ï–¢–û–î: –ë–ê–ì–ê–¢–û–ö–û–†–ò–°–¢–£–í–ê–¶–¨–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø ===
    def run_automation_multiple_users(self, target_users_input, messages, actions_config=None):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ü–û–°–õ–Ü–î–û–í–ù–û"""
        try:
            self.logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –±–∞–≥–∞—Ç–æ–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—ó –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            if isinstance(target_users_input, list):
                # –Ø–∫—â–æ –≤–∂–µ —Å–ø–∏—Å–æ–∫ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
                target_users = target_users_input
            else:
                # –Ø–∫—â–æ —Ä—è–¥–æ–∫ - –ø–∞—Ä—Å–∏–º–æ
                target_users = self.parse_target_users(target_users_input)
            
            if not target_users:
                self.logger.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
                return False
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—ñ–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            if actions_config is None:
                actions_config = {
                    'like_posts': True,
                    'like_stories': True, 
                    'reply_stories': True,
                    'send_direct_message': True,
                    'posts_count': 2
                }
            
            # –í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É (–û–î–ò–ù –†–ê–ó –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
            if not self.login():
                self.logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É")
                return False
            
            total_users = len(target_users)
            successful_users = 0
            failed_users = []
            
            self.logger.info("=" * 60)
            self.logger.info(f"üìã –ü–õ–ê–ù: –û–±—Ä–æ–±–∏—Ç–∏ {total_users} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ")
            self.logger.info(f"üéØ –°–ø–∏—Å–æ–∫: {', '.join(target_users)}")
            self.logger.info("üìã –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
            self.logger.info("  1. üì∏ –õ–∞–π–∫ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ—Å—Ç—ñ–≤ (–ø—Ä–æ—Ñ—ñ–ª—å ‚Üí –ø–æ—Å—Ç ‚Üí –ª–∞–π–∫ ‚Üí –Ω–∞–∑–∞–¥)")
            self.logger.info("  2. üì± –°—Ç–æ—Ä—ñ—Å (–∞–≤–∞—Ç–∞—Ä–∫–∞ ‚Üí –ª–∞–π–∫ ‚Üí –≤—ñ–¥–ø–æ–≤—ñ–¥—å)")
            self.logger.info("  3. üí¨ Fallback DM (—è–∫—â–æ —Å—Ç–æ—Ä—ñ—Å –Ω–µ–º–∞—î)")
            self.logger.info("=" * 60)
            
            # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ü–û–°–õ–Ü–î–û–í–ù–û
            for user_index, target_user in enumerate(target_users, 1):
                try:
                    self.logger.info("")
                    self.logger.info("üîπ" * 60)
                    self.logger.info(f"üë§ –ö–û–†–ò–°–¢–£–í–ê–ß {user_index}/{total_users}: @{target_user}")
                    self.logger.info("üîπ" * 60)
                    
                    # –í–∏–∫–æ–Ω—É—î–º–æ –í–°–Ü –¥—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    user_success = self.run_single_user_automation(target_user, messages, actions_config)
                    
                    if user_success:
                        successful_users += 1
                        self.logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{target_user} –æ–±—Ä–æ–±–ª–µ–Ω–∏–π –£–°–ü–Ü–®–ù–û!")
                    else:
                        failed_users.append(target_user)
                        self.logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ @{target_user}")
                    
                    # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ)
                    if user_index < total_users:
                        delay_time = random.uniform(30, 60)  # 30-60 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
                        self.logger.info(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ {delay_time:.1f} —Å–µ–∫. –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º...")
                        time.sleep(delay_time)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ @{target_user}: {e}")
                    failed_users.append(target_user)
                    continue
            
            # –ü—ñ–¥—Å—É–º–æ–∫ —Ä–æ–±–æ—Ç–∏
            success_rate = (successful_users / total_users) * 100
            
            self.logger.info("")
            self.logger.info("üî∏" * 60)
            self.logger.info("üìä === –ó–ê–ì–ê–õ–¨–ù–ò–ô –ü–Ü–î–°–£–ú–û–ö –ë–ê–ì–ê–¢–û–ö–û–†–ò–°–¢–£–í–ê–¶–¨–ö–û–á –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á ===")
            self.logger.info("üî∏" * 60)
            self.logger.info(f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}")
            self.logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {successful_users}")
            self.logger.info(f"‚ùå –ü–æ–º–∏–ª–∫–∏: {len(failed_users)}")
            self.logger.info(f"üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%")
            
            if failed_users:
                self.logger.info(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏: {', '.join(failed_users)}")
            
            if success_rate == 100:
                self.logger.info("üéâ –í–Ü–î–ú–Ü–ù–ù–û! –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
            elif success_rate >= 80:
                self.logger.info("üëç –î–û–ë–†–ï! –ë—ñ–ª—å—à—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            elif success_rate >= 50:
                self.logger.info("‚ö†Ô∏è –ó–ê–î–û–í–Ü–õ–¨–ù–û! –ü–æ–ª–æ–≤–∏–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–∞!")
            else:
                self.logger.info("üòû –ü–û–¢–†–Ü–ë–ù–û –ü–û–ö–†–ê–©–ï–ù–ù–Ø! –ë–∞–≥–∞—Ç–æ –ø–æ–º–∏–ª–æ–∫!")
            
            self.logger.info("üî∏" * 60)
            
            return successful_users > 0
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –±–∞–≥–∞—Ç–æ–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {e}")
            return False

    def run_single_user_automation(self, target_username, messages, actions_config=None):
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É –¥—ñ–π –¥–ª—è –û–î–ù–û–ì–û –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            self.logger.info(f"üéØ –ü–æ—á–∞—Ç–æ–∫ –ø–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É –¥–ª—è @{target_username}")
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—ñ–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            if actions_config is None:
                actions_config = {
                    'like_posts': True,
                    'like_stories': True,
                    'reply_stories': True, 
                    'send_direct_message': True,
                    'posts_count': 2
                }
            
            success_count = 0
            total_actions = 3
            
            # 1. –ï–¢–ê–ü 1: –õ–∞–π–∫ –ø–æ—Å—Ç—ñ–≤ (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
            if actions_config.get('like_posts', True):
                self.logger.info("üì∏ === –ï–¢–ê–ü 1: –õ–ê–ô–ö –ü–û–°–¢–Ü–í ===")
                try:
                    posts_count = actions_config.get('posts_count', 2)
                    if self.like_recent_posts(target_username, posts_count):
                        success_count += 1
                        self.logger.info("‚úÖ –õ–∞–π–∫–∏ –ø–æ—Å—Ç—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                    else:
                        self.logger.warning("‚ùå –õ–∞–π–∫–∏ –ø–æ—Å—Ç—ñ–≤ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ")
                except Exception as e:
                    self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–∞–π–∫—É –ø–æ—Å—Ç—ñ–≤: {e}")
                    
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –µ—Ç–∞–ø–∞–º–∏
                self.logger.info("‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –µ—Ç–∞–ø–∞–º–∏...")
                self.human_like_delay(15, 25)
            
            # 2. –ï–¢–ê–ü 2: –°—Ç–æ—Ä—ñ—Å (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
            story_success = False
            if actions_config.get('like_stories', True) or actions_config.get('reply_stories', True):
                self.logger.info("üì± === –ï–¢–ê–ü 2: –°–¢–û–†–Ü–° (–õ–ê–ô–ö + –í–Ü–î–ü–û–í–Ü–î–¨) ===")
                try:
                    story_success = self.process_story_with_config(target_username, messages, actions_config)
                    if story_success:
                        success_count += 1
                        self.logger.info("‚úÖ –°—Ç–æ—Ä—ñ—Å —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞")
                    else:
                        self.logger.warning("‚ùå –°—Ç–æ—Ä—ñ—Å –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                except Exception as e:
                    self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑—ñ —Å—Ç–æ—Ä—ñ—Å: {e}")
                    
            # 3. –ï–¢–ê–ü 3: Fallback - Direct Message (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —ñ —Å—Ç–æ—Ä—ñ—Å –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞)
            if not story_success and actions_config.get('send_direct_message', True):
                self.logger.info("üí¨ === –ï–¢–ê–ü 3: FALLBACK - DIRECT MESSAGE ===")
                self.human_like_delay(10, 15)
                
                try:
                    if self.send_direct_message(target_username, messages):
                        success_count += 1
                        self.logger.info("‚úÖ Direct Message –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                    else:
                        self.logger.warning("‚ùå Direct Message –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                except Exception as e:
                    self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ Direct Message: {e}")
            
            # –ü—ñ–¥—Å—É–º–æ–∫ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            success_rate = (success_count / total_actions) * 100
            
            self.logger.info("üìä === –ü–Ü–î–°–£–ú–û–ö –î–õ–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê ===")
            
            if success_count == total_actions:
                self.logger.info(f"üéâ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{target_username} - –ü–û–í–ù–Ü–°–¢–Æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{total_actions} –¥—ñ–π ({success_rate:.1f}%)")
            elif success_count > 0:
                self.logger.info(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{target_username} - –ß–ê–°–¢–ö–û–í–û –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{total_actions} –¥—ñ–π ({success_rate:.1f}%)")
            else:
                self.logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{target_username} - –ù–ï –í–ò–ö–û–ù–ê–ù–û: {success_count}/{total_actions} –¥—ñ–π ({success_rate:.1f}%)")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            actions_status = {
                "üì∏ –õ–∞–π–∫ –ø–æ—Å—Ç—ñ–≤": "‚úÖ" if actions_config.get('like_posts', True) and success_count >= 1 else "‚ùå",
                "üì± –°—Ç–æ—Ä—ñ—Å": "‚úÖ" if story_success else "‚ùå", 
                "üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "‚úÖ" if not story_success and success_count >= 2 else "‚ùå"
            }
            
            self.logger.info("üìã –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            for action, status in actions_status.items():
                self.logger.info(f"  {status} {action}")
            
            return success_count > 0
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{target_username}: {e}")
            return False

    def process_story_with_config(self, target_username, messages, actions_config):
        """–û–±—Ä–æ–±–∫–∞ —Å—Ç–æ—Ä—ñ—Å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        try:
            # –ü—Ä—è–º–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å —Ü—ñ–ª—å–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            profile_url = f"https://www.instagram.com/{target_username}/"
            self.driver.get(profile_url)
            self.logger.info(f"üìç –ü—Ä—è–º–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å {target_username}")
            self.human_like_delay(2, 3)

            # –ü–æ—à—É–∫ –∞–≤–∞—Ç–∞—Ä–∞ –∑—ñ —Å—Ç–æ—Ä—ñ—Å
            story_avatar_selectors = [
                "button canvas[style*='border']",
                "div[style*='border'] button", 
                "img[style*='border']",
                "button[aria-label*='story']",
                "div[role='button'][tabindex='0']"
            ]
            
            story_avatar = None
            for selector in story_avatar_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed():
                            story_avatar = element
                            self.logger.info(f"üì± –ó–Ω–∞–π–¥–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä –∑—ñ —Å—Ç–æ—Ä—ñ—Å: {selector}")
                            break
                    if story_avatar:
                        break
                except Exception as e:
                    self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å—Ç–æ—Ä—ñ—Å —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä {selector}: {e}")
                    continue
            
            if not story_avatar:
                self.logger.info(f"üì≠ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç–æ—Ä—ñ—Å —É {target_username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return False
                
            # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ—Å
            self.logger.info(f"üé¨ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ—Å {target_username}")
            try:
                story_avatar.click()
            except:
                self.driver.execute_script("arguments[0].click();", story_avatar)
            self.human_like_delay(1, 2)

            story_actions_completed = 0

            # –õ–∞–π–∫ —Å—Ç–æ—Ä—ñ—Å (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
            if actions_config.get('like_stories', True):
                story_liked = False
                like_selectors = [
                    "svg[aria-label='Like']",
                    "svg[aria-label='–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è']",
                    "button[aria-label*='Like']",
                    "span[role='button'] svg[aria-label*='Like']"
                ]
                
                for selector in like_selectors:
                    try:
                        like_button = WebDriverWait(self.driver, 3).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                        )
                        if 'Unlike' not in (like_button.get_attribute('aria-label') or ''):
                            like_button.click()
                            story_liked = True
                            story_actions_completed += 1
                            self.logger.info("‚ù§Ô∏è –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫ —Å—Ç–æ—Ä—ñ—Å")
                            break
                    except:
                        continue

                if not story_liked:
                    self.logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ª–∞–π–∫ —Å—Ç–æ—Ä—ñ—Å")

            # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å—Ç–æ—Ä—ñ—Å (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)
            if actions_config.get('reply_stories', True):
                story_replied = False
                reply_selectors = [
                    "textarea[placeholder*='Send message']",
                    "textarea[placeholder*='Reply']",
                    "div[contenteditable='true'][aria-label*='Message']",
                    "textarea[placeholder*='–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è']"
                ]
                
                for selector in reply_selectors:
                    try:
                        reply_input = WebDriverWait(self.driver, 3).until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                        )
                        message = random.choice(messages)
                        reply_input.clear()
                        
                        # –®–í–ò–î–ö–ï –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–æ—Ä—ñ—Å
                        self.fast_typing(reply_input, message)
                        self.logger.info(f"üí¨ –í–≤–µ–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {message}")
                        
                        # –ü–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ Send (–∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Å–ø—Ä–∞–≤–∞ –≤—ñ–¥ –ø–æ–ª—è –≤–≤–æ–¥—É) - –û–†–ò–ì–Ü–ù–ê–õ–¨–ù–ê –õ–û–ì–Ü–ö–ê
                        send_button_found = False
                        
                        # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ–ª—è –≤–≤–æ–¥—É
                        try:
                            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è –≤–≤–æ–¥—É
                            parent_container = reply_input.find_element(By.XPATH, "./..")
                            
                            # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É Send –≤ —Ç–æ–º—É –∂ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
                            send_selectors_relative = [
                                ".//button[contains(@aria-label, 'Send')]",
                                ".//button[contains(@aria-label, '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏')]",
                                ".//div[@role='button'][contains(@tabindex, '0')]//svg",
                                ".//button[contains(@type, 'submit')]",
                                ".//button[.//*[name()='svg']]"
                            ]
                            
                            for selector in send_selectors_relative:
                                try:
                                    send_button = parent_container.find_element(By.XPATH, selector)
                                    if send_button.is_displayed():
                                        send_button.click()
                                        send_button_found = True
                                        self.logger.info("üì§ –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É Send (–≤—ñ–¥–Ω–æ—Å–Ω–∏–π –ø–æ—à—É–∫)")
                                        break
                                except:
                                    continue
                                    
                        except Exception as e:
                            self.logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ—Å–Ω–æ–≥–æ –ø–æ—à—É–∫—É: {e}")
                        
                        # –Ø–∫—â–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π –ø–æ—à—É–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, —à—É–∫–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–æ
                        if not send_button_found:
                            send_selectors = [
                                "button[aria-label*='Send']",
                                "button[aria-label*='–ù–∞–¥—ñ—Å–ª–∞—Ç–∏']",
                                "div[role='button'][tabindex='0'] svg[aria-label*='Send']",
                                "div[role='button'][tabindex='0'] svg[aria-label*='–ù–∞–¥—ñ—Å–ª–∞—Ç–∏']",
                                "button[type='submit']",
                                "svg[aria-label*='Send']",
                                "svg[aria-label*='–ù–∞–¥—ñ—Å–ª–∞—Ç–∏']",
                                "button:has(svg[aria-label*='Send'])",
                                "button:has(svg[aria-label*='–ù–∞–¥—ñ—Å–ª–∞—Ç–∏'])",
                                # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Send
                                "button svg[viewBox*='24'][fill*='#']",  # –¢–∏–ø–æ–≤–∞ —ñ–∫–æ–Ω–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                                "div[role='button'] svg[d*='M1.101']",   # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ —ñ–∫–æ–Ω–∫–∞ Send Instagram
                                "button[style*='cursor: pointer']",      # –ê–∫—Ç–∏–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞
                            ]
                            
                            for send_selector in send_selectors:
                                try:
                                    send_button = WebDriverWait(self.driver, 2).until(
                                        EC.element_to_be_clickable((By.CSS_SELECTOR, send_selector))
                                    )
                                    if send_button.is_displayed():
                                        send_button.click()
                                        send_button_found = True
                                        self.logger.info("üì§ –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É Send (–≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫)")
                                        break
                                except:
                                    continue
                        
                        # –Ø–∫—â–æ –∫–Ω–æ–ø–∫–∞ Send –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —à—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –ø–æ–ª—è –≤–≤–æ–¥—É
                        if not send_button_found:
                            try:
                                # –®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å—É—Å—ñ–¥–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç
                                next_sibling = reply_input.find_element(By.XPATH, "./following-sibling::*[1]")
                                if next_sibling.tag_name in ['button', 'div'] and next_sibling.is_displayed():
                                    next_sibling.click()
                                    send_button_found = True
                                    self.logger.info("üì§ –ù–∞—Ç–∏—Å–Ω—É—Ç–æ —Å—É—Å—ñ–¥–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç (–∫–Ω–æ–ø–∫–∞ Send)")
                            except:
                                pass
                        
                        # –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç - Ctrl+Enter –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
                        if not send_button_found:
                            reply_input.send_keys(Keys.TAB + Keys.RETURN)
                            self.logger.info("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Ctrl+Enter")
                        
                        story_replied = True
                        story_actions_completed += 1
                        self.logger.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å—Ç–æ—Ä—ñ—Å: {message}")
                        break
                        
                    except Exception as e:
                        continue

                if not story_replied:
                    self.logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Å—Ç–æ—Ä—ñ—Å")

            # –í–ê–ñ–õ–ò–í–û: –ß–ï–ö–ê–Ñ–ú–û 5 –°–ï–ö–£–ù–î –ü–Ü–°–õ–Ø –í–°–Ü–• –î–Ü–ô
            self.logger.info("‚è≥ –û–±–æ–≤'—è–∑–∫–æ–≤–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è 5 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –¥—ñ–π –≤ —Å—Ç–æ—Ä—ñ—Å...")
            time.sleep(5)
            self.logger.info("‚úÖ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

            # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å—Ç–æ—Ä—ñ—Å (—Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è)
            close_selectors = [
                "svg[aria-label='Close']",
                "button[aria-label='Close']",
                "div[role='button'][tabindex='0']"
            ]
            
            for selector in close_selectors:
                try:
                    close_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    close_button.click()
                    self.logger.info("üö™ –°—Ç–æ—Ä—ñ—Å –∑–∞–∫—Ä–∏—Ç–∞")
                    break
                except:
                    continue
            else:
                ActionChains(self.driver).send_keys(Keys.ESCAPE).perform()
                self.logger.info("üö™ –°—Ç–æ—Ä—ñ—Å –∑–∞–∫—Ä–∏—Ç–∞ —á–µ—Ä–µ–∑ ESC")

            return story_actions_completed > 0

        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å—Ç–æ—Ä—ñ—Å: {str(e)}")
            return False

    # –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ API –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    def run_automation(self, target_username, messages):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é (—Å—Ç–∞—Ä–∏–π API)"""
        try:
            # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–¥–∏–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —è–∫ —Ä—è–¥–æ–∫
            if isinstance(target_username, str) and ',' not in target_username and ';' not in target_username and '\n' not in target_username:
                self.logger.info(f"üöÄ –ü–æ—á–∞—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –¥–ª—è {target_username}")
                
                # –í—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
                if not self.login():
                    self.logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É")
                    return False
                
                # –í–∏–∫–æ–Ω—É—î–º–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                return self.run_single_user_automation(target_username, messages)
            else:
                # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –±–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥  
                return self.run_automation_multiple_users(target_username, messages)
                
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {e}")
            return False
        finally:
            # –ó–∞–≤–µ—Ä—à–∞–ª—å–Ω—ñ –¥—ñ—ó
            try:
                self.logger.info("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó...")
                self.human_like_delay(2, 5)
            except:
                pass
            
    def close(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—é"""
        if hasattr(self, "driver") and self.driver:
            self.driver.quit()
            self.driver = None
        
        # –ó–∞–∫—Ä–∏—Ç—Ç—è Dolphin –ø—Ä–æ—Ñ—ñ–ª—é
        if self.dolphin_manager and self.browser_type == "dolphin anty":
            try:
                self.dolphin_manager.stop_profile(self.username)
                self.logger.info(f"üê¨ Dolphin –ø—Ä–æ—Ñ—ñ–ª—å {self.username} –∑—É–ø–∏–Ω–µ–Ω–æ")
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è Dolphin –ø—Ä–æ—Ñ—ñ–ª—é: {e}")

    def __del__(self):
        try:
            self.close()
        except Exception:
            pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –±—É–¥—å-—è–∫—ñ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞


# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ –±–∞–≥–∞—Ç—å–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–±–æ—Ç–∏
    USERNAME = "your_username"
    PASSWORD = "your_password"
    
    # === –ü–†–ò–ö–õ–ê–î–ò –†–Ü–ó–ù–ò–• –°–ü–û–°–û–ë–Ü–í –í–í–ï–î–ï–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ===
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 1: –û–¥–∏–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (—Å—Ç–∞—Ä–∏–π —Å–ø–æ—Å—ñ–±)
    SINGLE_USER = "target_username"
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 2: –ë–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É
    MULTIPLE_USERS_COMMA = "user1, user2, user3, user4, user5"
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 3: –ë–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ –∫—Ä–∞–ø–∫—É –∑ –∫–æ–º–æ—é
    MULTIPLE_USERS_SEMICOLON = "user1; user2; user3; user4; user5"
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 4: –ë–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∫–æ–∂–µ–Ω –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
    MULTIPLE_USERS_NEWLINE = """user1
user2
user3
user4
user5"""
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 5: –ë–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª
    MULTIPLE_USERS_SPACE = "user1 user2 user3 user4 user5"
    
    # –í–∞—Ä—ñ–∞–Ω—Ç 6: –ó —Å–∏–º–≤–æ–ª–∞–º–∏ @ (–±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
    MULTIPLE_USERS_AT = "@user1, @user2, @user3, @user4, @user5"
    
    # –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
    TARGET_USERS = MULTIPLE_USERS_COMMA  # –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
    
    MESSAGES = [
        "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏? üòä",
        "–ì–∞—Ä–Ω–∏–π –ø–æ—Å—Ç! üëç",
        "–î—è–∫—É—é –∑–∞ —Ü—ñ–∫–∞–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç! üôè",
        "–°—É–ø–µ—Ä —Ñ–æ—Ç–æ! üì∏",
        "–í—ñ—Ç–∞—é! üéâ",
        "–ö–ª–∞—Å–Ω–æ! üî•",
        "–î—É–∂–µ –∫—Ä—É—Ç–æ! ‚≠ê",
        "–ß—É–¥–æ–≤–æ! üí´",
        # –ë–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–∞—Ä–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º:
        """–ü—Ä–∏–≤—ñ—Ç! üòä
–î—É–∂–µ —Å–ø–æ–¥–æ–±–∞–≤—Å—è —Ç–≤—ñ–π –ø–æ—Å—Ç!
–ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ! üëç""",
        
        """–ö–ª–∞—Å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç! üî•
–ß–µ–∫–∞—é –Ω–∞ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏
–¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏! ‚≠ê""",
        
        """Wow! Amazing content! ü§©
Keep up the great work
Looking forward to more! üíØ""",
        
        """–°—É–ø–µ—Ä! 
–î—É–∂–µ —Ü—ñ–∫–∞–≤–æ! 
–î—è–∫—É—é –∑–∞ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è! ‚ú®"""
    ]
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = InstagramBot(USERNAME, PASSWORD)
    
    try:
        print("üöÄ –ü–û–í–ù–Ü–°–¢–Æ –û–ù–û–í–õ–ï–ù–ò–ô Instagram Bot –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –í–°–Ü–• —Ç–∏–ø—ñ–≤ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –≤—Ö–æ–¥—É")
        print("=" * 80)
        print("üîß –ù–û–í–Ü –ú–û–ñ–õ–ò–í–û–°–¢–Ü:")
        print("‚úÖ –¢—Ä–µ—Ç—ñ–π —Ç–∏–ø —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—Ö–æ–¥—É (Bloks UI) –∑ aria-label='–£–≤—ñ–π—Ç–∏'")
        print("‚úÖ –†–æ–∑—É–º–Ω–µ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ '–ø–æ–∫–∞–∑–∞—Ç–∏ –ø–∞—Ä–æ–ª—å'")
        print("‚úÖ –ü–æ—Ç—Ä—ñ–π–Ω–∏–π fallback –º–µ—Ö–∞–Ω—ñ–∑–º –¥–ª—è –≤—Ö–æ–¥—É")
        print("‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å –≤—Ö–æ–¥—É")
        print("=" * 80)
        print("üìã –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ç–∏–ø–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –≤—Ö–æ–¥—É:")
        print("  üéØ –¢–∏–ø 1: –ù–æ–≤–∞ –≤–µ—Ä—Å—ñ—è (input[name='username'] + button[type='submit'])")
        print("  üéØ –¢–∏–ø 2: –°—Ç–∞—Ä–∞ –≤–µ—Ä—Å—ñ—è (aria-label + div[role='button'])")
        print("  üéØ –¢–∏–ø 3: Bloks UI (data-bloks-name + aria-label='–£–≤—ñ–π—Ç–∏') ‚Üê –ù–û–í–ò–ô!")
        print("=" * 80)
        print("üìã –ë–∞–≥–∞—Ç–æ–∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:")
        print("‚úÖ –û–¥–∏–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: –ø—Ä–æ—Å—Ç–æ –≤–∫–∞–∂—ñ—Ç—å —ñ–º'—è")
        print("‚úÖ –ë–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: —á–µ—Ä–µ–∑ –∫–æ–º—É, –∫—Ä–∞–ø–∫—É –∑ –∫–æ–º–æ—é, –ø—Ä–æ–±—ñ–ª –∞–±–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫")
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤ @ –∑ —ñ–º–µ–Ω")
        print("‚úÖ –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á1 (–≤—Å—ñ –¥—ñ—ó) ‚Üí –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á2 (–≤—Å—ñ –¥—ñ—ó) ‚Üí ...")
        print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ñ –ª–æ–≥–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        print("‚úÖ –ë–µ–∑–ø–µ—á–Ω—ñ –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏")
        print("=" * 80)
        print("üìã –ü–ª–∞–Ω –¥—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
        print("1. üì∏ –õ–∞–π–∫ –ø–æ—Å—Ç—ñ–≤: –ø—Ä–æ—Ñ—ñ–ª—å ‚Üí –ø–æ—Å—Ç1 ‚Üí –ª–∞–π–∫ ‚Üí –Ω–∞–∑–∞–¥ ‚Üí –ø–æ—Å—Ç2 ‚Üí –ª–∞–π–∫ ‚Üí –Ω–∞–∑–∞–¥")
        print("2. üì± –°—Ç–æ—Ä—ñ—Å: –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫—É ‚Üí –ª–∞–π–∫ ‚Üí –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
        print("3. üí¨ Fallback: —è–∫—â–æ —Å—Ç–æ—Ä—ñ—Å –Ω–µ–º–∞—î ‚Üí Direct Messages ‚Üí Next ‚Üí –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        print("=" * 80)
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        success = bot.run_automation(TARGET_USERS, MESSAGES)
        
        print("=" * 80)
        if success:
            print("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–µ—Ç–∞–ª—ñ –≤ –ª–æ–≥–∞—Ö.")
            print("‚úÖ –í—Å—ñ —Ç–∏–ø–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –≤—Ö–æ–¥—É –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è!")
        else:
            print("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!")
            print("üí° –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç—å —Ç–∏–ø —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
        print("=" * 80)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        
    finally:
        bot.close()
        print("üîö –ë–æ—Ç –∑–∞–∫—Ä–∏—Ç–æ")
