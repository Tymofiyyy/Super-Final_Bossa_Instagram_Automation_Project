#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Instagram Bot - –ú–æ–±—ñ–ª—å–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è
–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏

–ê–≤—Ç–æ—Ä: Instagram Bot Team
–í–µ—Ä—Å—ñ—è: 1.0.0
–î–∞—Ç–∞: 2025
"""

import sys
import os
import logging
import argparse
from pathlib import Path
import traceback

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ —à–ª—è—Ö—É
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

try:
    from config import Config
    from utils import setup_logging, create_directories
    from gui import InstagramBotGUI
    from instagram_bot import InstagramBot
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
    print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
    sys.exit(1)

def check_requirements():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    required_packages = [
        'selenium',
        'requests',
        'PIL',
        'cv2',
        'numpy',
        'matplotlib',
        'pytesseract'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≤–∏–ø–∞–¥–∫–∏ –¥–ª—è –ø–∞–∫–µ—Ç—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
            if package == 'PIL':
                try:
                    __import__('Pillow')
                except ImportError:
                    missing_packages.append('Pillow')
            elif package == 'cv2':
                try:
                    __import__('opencv-python')
                except ImportError:
                    missing_packages.append('opencv-python')
            else:
                missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞–∫–µ—Ç–∏:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\n–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    return True

def check_chromedriver():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ChromeDriver"""
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.service import Service
        from selenium.webdriver.chrome.options import Options
        
        # –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä
        options = Options()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        
        try:
            driver = webdriver.Chrome(options=options)
            driver.quit()
            return True
        except Exception:
            print("‚ùå ChromeDriver –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –ø—Ä–∞—Ü—é—î")
            print("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ ChromeDriver –∑ https://chromedriver.chromium.org/")
            print("–Ü –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –¥–æ PATH –∞–±–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ChromeDriver: {e}")
        return False

def setup_environment():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        create_directories()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        setup_logging()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config_file = current_dir / "data" / "config.json"
        if config_file.exists():
            Config.load_config(config_file)
            
        logging.info("üöÄ Instagram Bot –∑–∞–ø—É—â–µ–Ω–æ")
        logging.info(f"üìÅ –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {current_dir}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {e}")
        traceback.print_exc()
        return False

def run_gui():
    """–ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
    try:
        print("üé® –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É...")
        app = InstagramBotGUI()
        app.run()
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ GUI: {e}")
        traceback.print_exc()
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É GUI: {e}")

def run_cli(args):
    """–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫"""
    try:
        print("‚ö° –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫...")
        
        if not args.username or not args.password:
            print("‚ùå –í–∫–∞–∂—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–∞—Ä–æ–ª—å")
            return False
            
        if not args.target:
            print("‚ùå –í–∫–∞–∂—ñ—Ç—å —Ü—ñ–ª—å–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            return False
            
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
        bot = InstagramBot(args.username, args.password, args.proxy)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        messages = Config.DEFAULT_STORY_REPLIES
        if args.messages:
            messages = args.messages.split(',')
            
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        success = bot.run_automation(args.target, messages)
        
        if success:
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏!")
            return False
            
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ CLI: {e}")
        traceback.print_exc()
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ CLI: {e}")
        return False
    finally:
        if 'bot' in locals():
            bot.close()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    parser = argparse.ArgumentParser(
        description="Instagram Bot - –ú–æ–±—ñ–ª—å–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

  –ì—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
    python run.py

  –ö–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫:
    python run.py --cli --username myuser --password mypass --target targetuser
    
  –ó –ø—Ä–æ–∫—Å—ñ:
    python run.py --cli --username myuser --password mypass --target targetuser --proxy 127.0.0.1:8080
    
  –ó –∫–∞—Å—Ç–æ–º–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏:
    python run.py --cli --username myuser --password mypass --target targetuser --messages "Nice!,Cool!,Amazing!"
        """
    )
    
    parser.add_argument('--cli', action='store_true', 
                       help='–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫')
    parser.add_argument('--username', type=str, 
                       help='–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Instagram')
    parser.add_argument('--password', type=str, 
                       help='–ü–∞—Ä–æ–ª—å Instagram')
    parser.add_argument('--target', type=str, 
                       help='–¶—ñ–ª—å–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á')
    parser.add_argument('--proxy', type=str, 
                       help='–ü—Ä–æ–∫—Å—ñ —Å–µ—Ä–≤–µ—Ä (ip:port:username:password)')
    parser.add_argument('--messages', type=str, 
                       help='–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–æ—Ä—ñ—Å (—á–µ—Ä–µ–∑ –∫–æ–º—É)')
    parser.add_argument('--headless', action='store_true', 
                       help='–ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º—ñ')
    parser.add_argument('--debug', action='store_true', 
                       help='–†–µ–∂–∏–º –≤—ñ–¥–ª–∞–¥–∫–∏')
    parser.add_argument('--check', action='store_true', 
                       help='–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏')
    
    args = parser.parse_args()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        Config.LOGGING['level'] = 'DEBUG'
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è headless —Ä–µ–∂–∏–º—É
    if args.headless:
        Config.HEADLESS = True
    
    print("ü§ñ Instagram Bot - –ú–æ–±—ñ–ª—å–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏
    if args.check:
        print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏...")
        
        print("üì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
        if not check_requirements():
            return 1
        print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
        
        print("üåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ChromeDriver...")
        if not check_chromedriver():
            return 1
        print("‚úÖ ChromeDriver –ø—Ä–∞—Ü—é—î")
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!")
        return 0
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    if not check_requirements():
        return 1
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ChromeDriver
    if not check_chromedriver():
        return 1
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if not setup_environment():
        return 1
    
    try:
        if args.cli:
            # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫
            success = run_cli(args)
            return 0 if success else 1
        else:
            # –ó–∞–ø—É—Å–∫ GUI
            run_gui()
            return 0
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return 0
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        traceback.print_exc()
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())