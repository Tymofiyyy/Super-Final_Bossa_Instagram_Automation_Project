import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import threading
import json
import os
from datetime import datetime
import logging
import queue
import time
from concurrent.futures import ThreadPoolExecutor
import customtkinter as ctk
import sys

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CustomTkinter –¥–ª—è —Å—É—á–∞—Å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω—É
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class InstagramBotGUI:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("Instagram Bot Pro - Multi-Account Edition")
        self.root.geometry("800x600")
        self.root.minsize(600, 400)

        
        # –Ü–∫–æ–Ω–∫–∞ –≤—ñ–∫–Ω–∞
        try:
            self.root.iconbitmap("assets/icon.ico")
        except:
            pass
        
        # –ó–º—ñ–Ω–Ω—ñ
        self.accounts = {}  # –°–ª–æ–≤–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
        self.bot_threads = {}  # –ü–æ—Ç–æ–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –±–æ—Ç–∞
        self.running_bots = {}  # –ê–∫—Ç–∏–≤–Ω—ñ –±–æ—Ç–∏
        self.message_queue = queue.Queue()  # –ß–µ—Ä–≥–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è GUI
        self.executor = ThreadPoolExecutor(max_workers=10)  # –î–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
        
        # –ö–æ–ª—å–æ—Ä–æ–≤–∞ —Å—Ö–µ–º–∞ Material Design
        self.colors = {
            'primary': '#1976D2',
            'primary_dark': '#1565C0',
            'primary_light': '#42A5F5',
            'secondary': '#FFC107',
            'accent': '#E91E63',
            'success': '#4CAF50',
            'warning': '#FF9800',
            'error': '#F44336',
            'info': '#2196F3',
            'bg_dark': '#121212',
            'bg_medium': '#1E1E1E',
            'bg_light': '#2D2D2D',
            'text_primary': '#FFFFFF',
            'text_secondary': '#B0B0B0'
        }
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.create_modern_ui()
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–æ–±–Ω–∏–∫–∞ —á–µ—Ä–≥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.process_message_queue()
        
    def create_modern_ui(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—É—á–∞—Å–Ω–æ–≥–æ Material Design —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º
        main_container = ctk.CTkFrame(self.root, corner_radius=0)
        main_container.pack(fill="both", expand=True)
        
        # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –ª–æ–≥–æ—Ç–∏–ø–æ–º
        self.create_header(main_container)
        
        # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        sidebar = self.create_sidebar(main_container)
        sidebar.pack(side="left", fill="y", padx=(10, 0), pady=10)
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_frame = ctk.CTkFrame(main_container, fg_color="transparent")
        content_frame.pack(side="right", fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∏ –∑ —ñ–∫–æ–Ω–∫–∞–º–∏
        self.notebook = ctk.CTkTabview(content_frame, corner_radius=10)
        self.notebook.pack(fill="both", expand=True)
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫
        self.create_multi_account_tab()
        self.create_automation_tab()
        self.create_messages_tab()
        self.create_monitoring_tab()
        self.create_settings_tab()
        
    def create_header(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏–ª—å–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫—É"""
        header_frame = ctk.CTkFrame(parent, height=80, corner_radius=0, fg_color=self.colors['primary_dark'])
        header_frame.pack(fill="x", padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        # –õ–æ–≥–æ—Ç–∏–ø —Ç–∞ –Ω–∞–∑–≤–∞
        logo_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        logo_frame.pack(side="left", padx=20, pady=10)
        
        # –ï–º–æ–¥–∑—ñ –∑–∞–º—ñ—Å—Ç—å —ñ–∫–æ–Ω–∫–∏
        logo_label = ctk.CTkLabel(logo_frame, text="ü§ñ", font=("Arial", 36))
        logo_label.pack(side="left", padx=(0, 10))
        
        # –ù–∞–∑–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º
        title_label = ctk.CTkLabel(logo_frame, text="Instagram Bot Pro", 
                                  font=("Arial", 28, "bold"),
                                  text_color="#FFFFFF")
        title_label.pack(side="left")
        
        subtitle_label = ctk.CTkLabel(logo_frame, text="Multi-Account Automation", 
                                     font=("Arial", 14),
                                     text_color="#B0BEC5")
        subtitle_label.pack(side="left", padx=(10, 0))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—Ä–∞–≤–∞
        stats_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        stats_frame.pack(side="right", padx=20)
        
        self.active_accounts_label = ctk.CTkLabel(stats_frame, text="üë• Active: 0", 
                                                 font=("Arial", 14))
        self.active_accounts_label.pack(side="left", padx=10)
        
        self.total_actions_label = ctk.CTkLabel(stats_frame, text="‚ö° Actions: 0", 
                                               font=("Arial", 14))
        self.total_actions_label.pack(side="left", padx=10)
        
    def create_sidebar(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—ñ—á–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
        sidebar = ctk.CTkFrame(parent, width=200, corner_radius=10)
        sidebar.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        sidebar_title = ctk.CTkLabel(sidebar, text="Quick Actions", 
                                    font=("Arial", 16, "bold"))
        sidebar_title.pack(pady=(20, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
        buttons_data = [
            ("üöÄ", "Start All", self.start_all_accounts, self.colors['success']),
            ("‚èπÔ∏è", "Stop All", self.stop_all_accounts, self.colors['error']),
            ("‚ûï", "Add Account", self.add_account_dialog, self.colors['info']),
            ("üìä", "Statistics", self.show_statistics, self.colors['secondary']),
            ("üîÑ", "Refresh", self.refresh_all, self.colors['primary']),
            ("üéØ", "Reset Targets", self.reset_target_distribution, self.colors['warning']),  # –ù–û–í–ê –ö–ù–û–ü–ö–ê
            ("‚öôÔ∏è", "Settings", self.open_settings, self.colors['text_secondary'])
        ]
        
        for icon, text, command, color in buttons_data:
            btn = ctk.CTkButton(sidebar, 
                              text=f"{icon} {text}",
                              command=command,
                              height=40,
                              font=("Arial", 14),
                              fg_color=color,
                              hover_color=self.darken_color(color))
            btn.pack(fill="x", padx=10, pady=5)
        
        # –†–æ–∑–¥—ñ–ª—é–≤–∞—á
        separator = ctk.CTkFrame(sidebar, height=2, fg_color=self.colors['text_secondary'])
        separator.pack(fill="x", padx=20, pady=20)
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ—Ä—Å—ñ—é
        version_label = ctk.CTkLabel(sidebar, text="Version 2.0 Pro", 
                                    font=("Arial", 10),
                                    text_color=self.colors['text_secondary'])
        version_label.pack(side="bottom", pady=10)
        
        return sidebar
        
    def create_multi_account_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –±–∞–≥–∞—Ç–æ–∞–∫–∞—É–Ω—Ç–Ω–æ—Å—Ç—ñ –∑ —Å—É—á–∞—Å–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º"""
        tab = self.notebook.add("üë• Multi-Account")
        
        # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        toolbar = ctk.CTkFrame(tab, height=60, corner_radius=10)
        toolbar.pack(fill="x", padx=10, pady=10)
        toolbar.pack_propagate(False)
        
        # –ö–Ω–æ–ø–∫–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        tools_frame = ctk.CTkFrame(toolbar, fg_color="transparent")
        tools_frame.pack(side="left", padx=10, pady=10)
        
        ctk.CTkButton(tools_frame, text="‚ûï Add Account", 
                     command=self.add_account_dialog,
                     width=120, height=35).pack(side="left", padx=5)
        
        ctk.CTkButton(tools_frame, text="üìÅ Import CSV", 
                     command=self.import_accounts_csv,
                     width=120, height=35).pack(side="left", padx=5)
        
        ctk.CTkButton(tools_frame, text="üíæ Export", 
                     command=self.export_accounts,
                     width=100, height=35).pack(side="left", padx=5)
        
        # –°–µ–ª–µ–∫—Ç–æ—Ä –±—Ä–∞—É–∑–µ—Ä–∞
        browser_frame = ctk.CTkFrame(toolbar, fg_color="transparent")
        browser_frame.pack(side="right", padx=10, pady=10)
        
        ctk.CTkLabel(browser_frame, text="Browser:").pack(side="left", padx=5)
        self.browser_var = tk.StringVar(value="Chrome")
        browser_menu = ctk.CTkOptionMenu(browser_frame, 
                                       values=["Chrome", "Dolphin Anty"],
                                       variable=self.browser_var,
                                       width=120)
        browser_menu.pack(side="left")
        
        # –¢–∞–±–ª–∏—Ü—è –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ —Å—É—á–∞—Å–Ω–∏–º —Å—Ç–∏–ª–µ–º
        accounts_frame = ctk.CTkFrame(tab, corner_radius=10)
        accounts_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
        headers_frame = ctk.CTkFrame(accounts_frame, height=40, fg_color=self.colors['primary'])
        headers_frame.pack(fill="x", padx=1, pady=1)
        headers_frame.pack_propagate(False)
        
        headers = ["Select", "Username", "Status", "Proxy", "Actions", "Last Activity", "Controls"]
        weights = [0.5, 2, 1.5, 2, 1, 2, 2]
        
        for header, weight in zip(headers, weights):
            label = ctk.CTkLabel(headers_frame, text=header, 
                               font=("Arial", 12, "bold"),
                               text_color="white")
            label.pack(side="left", expand=True, fill="x", padx=5)
        
        # –°–∫—Ä–æ–ª–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä—è–¥–∫—ñ–≤
        self.accounts_scroll_frame = ctk.CTkScrollableFrame(accounts_frame, 
                                                           corner_radius=0,
                                                           fg_color=self.colors['bg_medium'])
        self.accounts_scroll_frame.pack(fill="both", expand=True, padx=1, pady=1)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
        self.add_sample_accounts()
        
    def add_account_row(self, username, password, proxy=""):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ –∞–∫–∞—É–Ω—Ç–∞ –∑ —Å—É—á–∞—Å–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º"""
        row_frame = ctk.CTkFrame(self.accounts_scroll_frame, 
                               height=50,
                               corner_radius=5,
                               fg_color=self.colors['bg_light'])
        row_frame.pack(fill="x", padx=5, pady=3)
        row_frame.pack_propagate(False)
        
        # –ß–µ–∫–±–æ–∫—Å
        var = tk.BooleanVar(value=True)
        checkbox = ctk.CTkCheckBox(row_frame, text="", variable=var, width=30)
        checkbox.pack(side="left", padx=10)
        
        # Username
        username_label = ctk.CTkLabel(row_frame, text=username, 
                                    font=("Arial", 12, "bold"))
        username_label.pack(side="left", expand=True, fill="x", padx=5)
        
        # –°—Ç–∞—Ç—É—Å –∑ –∫–æ–ª—å–æ—Ä–æ–≤–æ—é —ñ–Ω–¥–∏–∫–∞—Ü—ñ—î—é
        status_frame = ctk.CTkFrame(row_frame, fg_color="transparent")
        status_frame.pack(side="left", expand=True, fill="x", padx=5)
        
        status_indicator = ctk.CTkLabel(status_frame, text="‚óè", 
                                      text_color=self.colors['warning'],
                                      font=("Arial", 16))
        status_indicator.pack(side="left", padx=5)
        
        status_label = ctk.CTkLabel(status_frame, text="Ready", 
                                   font=("Arial", 11))
        status_label.pack(side="left")
        
        # Proxy
        proxy_label = ctk.CTkLabel(row_frame, text=proxy or "No proxy", 
                                 font=("Arial", 11),
                                 text_color=self.colors['text_secondary'])
        proxy_label.pack(side="left", expand=True, fill="x", padx=5)
        
        # Actions counter
        actions_label = ctk.CTkLabel(row_frame, text="0", 
                                   font=("Arial", 12))
        actions_label.pack(side="left", expand=True, fill="x", padx=5)
        
        # Last activity
        activity_label = ctk.CTkLabel(row_frame, text="Never", 
                                    font=("Arial", 11),
                                    text_color=self.colors['text_secondary'])
        activity_label.pack(side="left", expand=True, fill="x", padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        controls_frame = ctk.CTkFrame(row_frame, fg_color="transparent")
        controls_frame.pack(side="left", padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç—É/—Å—Ç–æ–ø—É –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
        start_btn = ctk.CTkButton(controls_frame, text="‚ñ∂", 
                                width=35, height=35,
                                fg_color=self.colors['success'],
                                command=lambda: self.toggle_account(username))
        start_btn.pack(side="left", padx=2)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        settings_btn = ctk.CTkButton(controls_frame, text="‚öô", 
                                   width=35, height=35,
                                   fg_color=self.colors['info'])
        settings_btn.pack(side="left", padx=2)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        delete_btn = ctk.CTkButton(controls_frame, text="üóë", 
                                 width=35, height=35,
                                 fg_color=self.colors['error'],
                                 command=lambda: self.remove_account(username))
        delete_btn.pack(side="left", padx=2)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        self.accounts[username] = {
            'password': password,
            'proxy': proxy,
            'row_frame': row_frame,
            'checkbox': var,
            'status_indicator': status_indicator,
            'status_label': status_label,
            'actions_label': actions_label,
            'activity_label': activity_label,
            'start_btn': start_btn,
            'settings_btn': settings_btn,
            'is_running': False
        }
        
    def create_automation_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º"""
        tab = self.notebook.add("üöÄ Automation")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –¥–≤–æ–º–∞ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        columns_frame = ctk.CTkFrame(tab, fg_color="transparent")
        columns_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –õ—ñ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        left_column = ctk.CTkFrame(columns_frame, corner_radius=10)
        left_column.pack(side="left", fill="both", expand=True, padx=(0, 5))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª—ñ–≤–æ—ó –∫–æ–ª–æ–Ω–∫–∏
        left_title = ctk.CTkLabel(left_column, text="‚öôÔ∏è Automation Settings", 
                                font=("Arial", 18, "bold"))
        left_title.pack(pady=10)
        
        # –¶—ñ–ª—å–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        targets_frame = ctk.CTkFrame(left_column, corner_radius=10)
        targets_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        targets_header = ctk.CTkFrame(targets_frame, height=40, 
                                    fg_color=self.colors['primary'])
        targets_header.pack(fill="x")
        targets_header.pack_propagate(False)
        
        ctk.CTkLabel(targets_header, text="üéØ Target Users", 
                    font=("Arial", 14, "bold"),
                    text_color="white").pack(side="left", padx=10)
        
        self.targets_count_label = ctk.CTkLabel(targets_header, text="Count: 0", 
                                              text_color="white")
        self.targets_count_label.pack(side="right", padx=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.targets_text = ctk.CTkTextbox(targets_frame, height=150,
                                         font=("Arial", 12))
        self.targets_text.pack(fill="both", expand=True, padx=10, pady=10)
        self.targets_text.insert("1.0", "user1, user2, user3\n@user4\n@user5")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è targets
        targets_buttons = ctk.CTkFrame(targets_frame, fg_color="transparent")
        targets_buttons.pack(fill="x", padx=10, pady=(0, 10))
        
        ctk.CTkButton(targets_buttons, text="üìÅ Load", width=80,
                     command=self.load_targets_from_file).pack(side="left", padx=2)
        ctk.CTkButton(targets_buttons, text="üíæ Save", width=80,
                     command=self.save_targets_to_file).pack(side="left", padx=2)
        ctk.CTkButton(targets_buttons, text="‚úÖ Validate", width=80,
                     command=self.validate_targets).pack(side="left", padx=2)
        ctk.CTkButton(targets_buttons, text="üßπ Clear", width=80,
                     command=lambda: self.targets_text.delete("1.0", "end")).pack(side="left", padx=2)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—ñ–π
        actions_frame = ctk.CTkFrame(left_column, corner_radius=10)
        actions_frame.pack(fill="x", padx=10, pady=5)
        
        actions_header = ctk.CTkFrame(actions_frame, height=40,
                                    fg_color=self.colors['primary'])
        actions_header.pack(fill="x")
        
        ctk.CTkLabel(actions_header, text="‚ö° Actions Configuration",
                    font=("Arial", 14, "bold"),
                    text_color="white").pack(padx=10, pady=5)
        
        # –ß–µ–∫–±–æ–∫—Å–∏ –¥—ñ–π –∑ —ñ–∫–æ–Ω–∫–∞–º–∏
        actions_content = ctk.CTkFrame(actions_frame)
        actions_content.pack(fill="x", padx=10, pady=10)
        
        self.like_posts_var = tk.BooleanVar(value=True)
        self.like_stories_var = tk.BooleanVar(value=True)
        self.reply_stories_var = tk.BooleanVar(value=True)
        self.send_dm_var = tk.BooleanVar(value=True)
        
        actions_data = [
            ("‚ù§Ô∏è Like Posts", self.like_posts_var),
            ("üëç Like Stories", self.like_stories_var),
            ("üí¨ Reply to Stories", self.reply_stories_var),
            ("üì© Send DM (Fallback)", self.send_dm_var)
        ]
        
        for text, var in actions_data:
            ctk.CTkCheckBox(actions_content, text=text, variable=var,
                          font=("Arial", 12)).pack(anchor="w", pady=3)
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤
        posts_frame = ctk.CTkFrame(actions_content, fg_color="transparent")
        posts_frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(posts_frame, text="Posts to like:").pack(side="left")
        self.posts_count_var = tk.IntVar(value=2)
        posts_slider = ctk.CTkSlider(posts_frame, from_=1, to=5,
                                   variable=self.posts_count_var,
                                   width=150)
        posts_slider.pack(side="left", padx=10)
        
        self.posts_count_label = ctk.CTkLabel(posts_frame, text="2")
        self.posts_count_label.pack(side="left")
        
        def update_posts_label(value):
            self.posts_count_label.configure(text=str(int(value)))
        posts_slider.configure(command=update_posts_label)
        
        # –ü—Ä–∞–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        right_column = ctk.CTkFrame(columns_frame, corner_radius=10)
        right_column.pack(side="right", fill="both", expand=True, padx=(5, 0))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∞–≤–æ—ó –∫–æ–ª–æ–Ω–∫–∏
        right_title = ctk.CTkLabel(right_column, text="üìä Real-time Monitoring",
                                 font=("Arial", 18, "bold"))
        right_title.pack(pady=10)
        
        # –õ–æ–≥–∏ –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º –∫–æ–¥—É–≤–∞–Ω–Ω—è–º
        logs_frame = ctk.CTkFrame(right_column, corner_radius=10)
        logs_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        logs_header = ctk.CTkFrame(logs_frame, height=40,
                                 fg_color=self.colors['primary'])
        logs_header.pack(fill="x")
        
        ctk.CTkLabel(logs_header, text="üìú Activity Logs",
                    font=("Arial", 14, "bold"),
                    text_color="white").pack(side="left", padx=10)
        
        # –ö–Ω–æ–ø–∫–∏ –ª–æ–≥—ñ–≤
        logs_buttons = ctk.CTkFrame(logs_header, fg_color="transparent")
        logs_buttons.pack(side="right", padx=10)
        
        ctk.CTkButton(logs_buttons, text="Clear", width=60, height=25,
                     command=self.clear_logs).pack(side="left", padx=2)
        ctk.CTkButton(logs_buttons, text="Export", width=60, height=25,
                     command=self.export_logs).pack(side="left", padx=2)
        
        # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –ª–æ–≥—ñ–≤
        self.logs_text = ctk.CTkTextbox(logs_frame, font=("Consolas", 10))
        self.logs_text.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö —Ç–µ–≥—ñ–≤ –¥–ª—è –ª–æ–≥—ñ–≤
        self.setup_log_tags()
        
    def create_messages_tab(self):
     """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
     tab = self.notebook.add("üí¨ Messages")
    
    # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é –≤–∏—Å–æ—Ç–æ—é
     main_frame = ctk.CTkFrame(tab, corner_radius=10)
     main_frame.pack(fill="both", expand=True, padx=10, pady=10)
    
    # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
     control_panel = ctk.CTkFrame(main_frame, height=40)
     control_panel.pack(fill="x", pady=(0, 10))
     control_panel.pack_propagate(False)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é —à–∏—Ä–∏–Ω–æ—é
     buttons = [
        ("‚ûï Add", self.add_message_dialog),
        ("‚úèÔ∏è Edit", self.edit_message_dialog),
        ("üóë Delete", self.delete_message),
        ("üìÅ Import", self.import_messages),
        ("üíæ Export", self.export_messages),
        ("üé≤ Templates", self.show_message_templates)
     ]
    
     for text, command in buttons:
        btn = ctk.CTkButton(control_panel, text=text, command=command,
                          width=70, height=30, font=("Arial", 11))
        btn.pack(side="left", padx=3)
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Å–ø–∏—Å–æ–∫ + —Ä–µ–¥–∞–∫—Ç–æ—Ä)
     content_frame = ctk.CTkFrame(main_frame)
     content_frame.pack(fill="both", expand=True)
    
    # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (30% —à–∏—Ä–∏–Ω–∏)
     list_frame = ctk.CTkFrame(content_frame, width=200, corner_radius=8)
     list_frame.pack(side="left", fill="y", padx=(0, 5))
     list_frame.pack_propagate(False)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫—É
     list_header = ctk.CTkFrame(list_frame, height=30, fg_color=self.colors['primary'])
     list_header.pack(fill="x")
     ctk.CTkLabel(list_header, text="üìã Message List", 
                font=("Arial", 12, "bold")).pack(pady=5)
    
    # –°–∫—Ä–æ–ª–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
     self.messages_listbox = tk.Listbox(list_frame,
                                     bg=self.colors['bg_medium'],
                                     fg=self.colors['text_primary'],
                                     selectbackground=self.colors['primary'],
                                     font=("Arial", 11),
                                     borderwidth=0,
                                     highlightthickness=0)
     self.messages_listbox.pack(fill="both", expand=True, padx=5, pady=5)
     self.messages_listbox.bind('<<ListboxSelect>>', self.on_message_select)
    
    # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - —Ä–µ–¥–∞–∫—Ç–æ—Ä (70% —à–∏—Ä–∏–Ω–∏)
     editor_frame = ctk.CTkFrame(content_frame, corner_radius=8)
     editor_frame.pack(side="right", fill="both", expand=True)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     editor_header = ctk.CTkFrame(editor_frame, height=30, fg_color=self.colors['primary'])
     editor_header.pack(fill="x")
     ctk.CTkLabel(editor_header, text="‚úèÔ∏è Message Editor", 
                font=("Arial", 12, "bold")).pack(pady=5)
    
    # –†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑—ñ —Å–∫—Ä–æ–ª–æ–º
     self.message_editor = ctk.CTkTextbox(editor_frame,
                                       font=("Arial", 12),
                                       wrap="word",
                                       height=150)  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤–∏—Å–æ—Ç–∞
     self.message_editor.pack(fill="both", expand=True, padx=5, pady=5)
    
    # –ù–∏–∂–Ω—è –ø–∞–Ω–µ–ª—å –∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
     bottom_panel = ctk.CTkFrame(editor_frame, height=80)
     bottom_panel.pack(fill="x", pady=(5, 0))
    
    # –ü–∞–Ω–µ–ª—å —à–≤–∏–¥–∫–∏—Ö –µ–º–æ–¥–∑—ñ
     emoji_frame = ctk.CTkFrame(bottom_panel)
     emoji_frame.pack(fill="x", padx=5, pady=2)
    
     ctk.CTkLabel(emoji_frame, text="Quick Emojis:").pack(side="left", padx=5)
    
     emojis = ["üòä", "‚ù§Ô∏è", "üî•", "üëç", "üéâ", "üíØ", "‚≠ê", "üôå", "üëè", "üí™"]
     for emoji in emojis:
        btn = ctk.CTkButton(emoji_frame, text=emoji, width=30, height=30,
                          command=lambda e=emoji: self.insert_emoji(e))
        btn.pack(side="left", padx=2)
    
    # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
     action_buttons = ctk.CTkFrame(bottom_panel)
     action_buttons.pack(fill="x", padx=5, pady=5)
    
     ctk.CTkButton(action_buttons, text="üíæ Save Message",
                 command=self.save_current_message,
                 width=120, height=30,
                 fg_color=self.colors['success']).pack(side="left", padx=5)
    
     ctk.CTkButton(action_buttons, text="üëÅÔ∏è Preview",
                 command=self.preview_message,
                 width=100, height=30).pack(side="left", padx=5)
    
     ctk.CTkButton(action_buttons, text="üßπ Clear",
                 command=lambda: self.message_editor.delete("1.0", "end"),
                 width=80, height=30).pack(side="left", padx=5)
    
     # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
     self.load_messages()
        
    def create_monitoring_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
        tab = self.notebook.add("üìä Monitoring")
        
        # –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        stats_panel = ctk.CTkFrame(tab, height=120, corner_radius=10)
        stats_panel.pack(fill="x", padx=10, pady=10)
        stats_panel.pack_propagate(False)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_container = ctk.CTkFrame(stats_panel, fg_color="transparent")
        stats_container.pack(expand=True)
        
        stats_data = [
            ("üë•", "Active Accounts", "0", self.colors['success']),
            ("‚ö°", "Total Actions", "0", self.colors['info']),
            ("‚ù§Ô∏è", "Likes Today", "0", self.colors['accent']),
            ("üí¨", "Messages Sent", "0", self.colors['secondary']),
            ("üìà", "Success Rate", "0%", self.colors['primary'])
        ]
        
        self.stat_labels = {}
        for icon, title, value, color in stats_data:
            card = self.create_stat_card(stats_container, icon, title, value, color)
            card.pack(side="left", padx=10)
            self.stat_labels[title] = card.winfo_children()[2]  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ label –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º
        
        # –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        details_frame = ctk.CTkFrame(tab, corner_radius=10)
        details_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # –¢–∞–±–ª–∏—á–∫–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        self.create_detailed_stats_table(details_frame)
        
    def create_settings_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        tab = self.notebook.add("‚öôÔ∏è Settings")
        
        # –°–∫—Ä–æ–ª–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        settings_scroll = ctk.CTkScrollableFrame(tab, corner_radius=10)
        settings_scroll.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –°–µ–∫—Ü—ñ—è –±—Ä–∞—É–∑–µ—Ä–∞
        browser_section = self.create_settings_section(settings_scroll, 
                                                     "üåê Browser Settings",
                                                     self.colors['primary'])
        
        # –í–∏–±—ñ—Ä –±—Ä–∞—É–∑–µ—Ä–∞
        browser_frame = ctk.CTkFrame(browser_section, fg_color="transparent")
        browser_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(browser_frame, text="Default Browser:").pack(side="left", padx=10)
        self.default_browser_var = tk.StringVar(value="Chrome")
        browser_options = ctk.CTkOptionMenu(browser_frame,
                                          values=["Chrome", "Dolphin Anty"],
                                          variable=self.default_browser_var)
        browser_options.pack(side="left", padx=10)
        
        # Headless mode
        self.headless_var = tk.BooleanVar(value=False)
        ctk.CTkCheckBox(browser_section, text="Run in headless mode (no GUI)",
                       variable=self.headless_var).pack(anchor="w", padx=20, pady=5)
        
        # –°–µ–∫—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–æ–∫
        delays_section = self.create_settings_section(settings_scroll,
                                                    "‚è±Ô∏è Delays & Timing",
                                                    self.colors['info'])
        
        # –°–ª–∞–π–¥–µ—Ä–∏ –∑–∞—Ç—Ä–∏–º–æ–∫
        delays_data = [
            ("Min delay between actions", 1, 10, 2),
            ("Max delay between actions", 5, 30, 5),
            ("Delay between users", 10, 120, 30),
            ("Human typing speed", 0.05, 0.5, 0.1)
        ]
        
        self.delay_vars = {}
        for label, from_val, to_val, default in delays_data:
            delay_frame = ctk.CTkFrame(delays_section, fg_color="transparent")
            delay_frame.pack(fill="x", padx=20, pady=5)
            
            ctk.CTkLabel(delay_frame, text=f"{label}:").pack(side="left", padx=10)
            
            var = tk.DoubleVar(value=default)
            self.delay_vars[label] = var
            
            slider = ctk.CTkSlider(delay_frame, from_=from_val, to=to_val,
                                 variable=var, width=200)
            slider.pack(side="left", padx=10)
            
            value_label = ctk.CTkLabel(delay_frame, text=f"{default}s")
            value_label.pack(side="left", padx=5)
            
            def update_label(val, lbl=value_label):
                lbl.configure(text=f"{val:.2f}s")
            slider.configure(command=update_label)
        
        # –°–µ–∫—Ü—ñ—è –±–µ–∑–ø–µ–∫–∏
        security_section = self.create_settings_section(settings_scroll,
                                                      "üîí Security & Limits",
                                                      self.colors['error'])
        
        # –õ—ñ–º—ñ—Ç–∏
        limits_data = [
            ("Max actions per day", 50, 500, 200),
            ("Max users per session", 10, 100, 50),
            ("Max parallel accounts", 1, 20, 5)
        ]
        
        self.limit_vars = {}
        for label, from_val, to_val, default in limits_data:
            limit_frame = ctk.CTkFrame(security_section, fg_color="transparent")
            limit_frame.pack(fill="x", padx=20, pady=5)
            
            ctk.CTkLabel(limit_frame, text=f"{label}:").pack(side="left", padx=10)
            
            var = tk.IntVar(value=default)
            self.limit_vars[label] = var
            
            slider = ctk.CTkSlider(limit_frame, from_=from_val, to=to_val,
                                 variable=var, width=200)
            slider.pack(side="left", padx=10)
            
            value_label = ctk.CTkLabel(limit_frame, text=str(default))
            value_label.pack(side="left", padx=5)
            
            def update_label(val, lbl=value_label):
                lbl.configure(text=str(int(val)))
            slider.configure(command=update_label)
        
        # –ö–Ω–æ–ø–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        buttons_frame = ctk.CTkFrame(settings_scroll, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkButton(buttons_frame, text="üíæ Save Settings",
                     command=self.save_settings,
                     fg_color=self.colors['success'],
                     width=150).pack(side="left", padx=10)
        
        ctk.CTkButton(buttons_frame, text="üîÑ Reset to Defaults",
                     command=self.reset_settings,
                     fg_color=self.colors['warning'],
                     width=150).pack(side="left", padx=10)
        
    def create_settings_section(self, parent, title, color):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        section = ctk.CTkFrame(parent, corner_radius=10)
        section.pack(fill="x", padx=10, pady=10)
        
        header = ctk.CTkFrame(section, height=40, fg_color=color, corner_radius=10)
        header.pack(fill="x")
        header.pack_propagate(False)
        
        ctk.CTkLabel(header, text=title,
                    font=("Arial", 14, "bold"),
                    text_color="white").pack(padx=15, pady=5)
        
        return section
        
    def create_stat_card(self, parent, icon, title, value, color):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        card = ctk.CTkFrame(parent, width=140, height=80, corner_radius=10)
        card.pack_propagate(False)
        
        # –Ü–∫–æ–Ω–∫–∞
        icon_label = ctk.CTkLabel(card, text=icon, font=("Arial", 24))
        icon_label.pack(pady=(10, 0))
        
        # –ù–∞–∑–≤–∞
        title_label = ctk.CTkLabel(card, text=title, 
                                 font=("Arial", 10),
                                 text_color=self.colors['text_secondary'])
        title_label.pack()
        
        # –ó–Ω–∞—á–µ–Ω–Ω—è
        value_label = ctk.CTkLabel(card, text=value,
                                 font=("Arial", 16, "bold"),
                                 text_color=color)
        value_label.pack()
        
        return card
        
    def create_detailed_stats_table(self, parent):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ctk.CTkFrame(parent, height=40, fg_color=self.colors['primary'])
        header.pack(fill="x")
        
        ctk.CTkLabel(header, text="üìà Detailed Statistics",
                    font=("Arial", 14, "bold"),
                    text_color="white").pack(padx=10, pady=5)
        
        # –¢–∞–±–ª–∏—Ü—è
        table_frame = ctk.CTkScrollableFrame(parent, corner_radius=0)
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        test_data = [
            ("account1", "Active", "150", "45", "30", "15", "95%"),
            ("account2", "Active", "120", "35", "25", "10", "92%"),
            ("account3", "Paused", "80", "20", "15", "5", "88%"),
        ]
        
        headers = ["Account", "Status", "Actions", "Likes", "Comments", "DMs", "Success"]
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
        headers_frame = ctk.CTkFrame(table_frame, height=35, fg_color=self.colors['bg_light'])
        headers_frame.pack(fill="x", padx=1, pady=1)
        
        for header in headers:
            ctk.CTkLabel(headers_frame, text=header,
                        font=("Arial", 11, "bold")).pack(side="left", expand=True, fill="x")
        
        # –†—è–¥–∫–∏ –¥–∞–Ω–∏—Ö
        for data in test_data:
            row_frame = ctk.CTkFrame(table_frame, height=30)
            row_frame.pack(fill="x", padx=1, pady=1)
            
            for value in data:
                ctk.CTkLabel(row_frame, text=value,
                           font=("Arial", 10)).pack(side="left", expand=True, fill="x")
        
    # === –ú–ï–¢–û–î–ò –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–û–°–¢–Ü ===
    
    def add_sample_accounts(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        sample_accounts = [
            ("test_account1", "password123", "proxy1.com:8080"),
            ("test_account2", "password456", ""),
            ("test_account3", "password789", "proxy2.com:3128")
        ]
        
        for username, password, proxy in sample_accounts:
            self.add_account_row(username, password, proxy)
            
    def toggle_account(self, username):
        """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∞–∫–∞—É–Ω—Ç–∞"""
        if username not in self.accounts:
            return
            
        account = self.accounts[username]
        
        if account['is_running']:
            self.stop_single_account(username)
        else:
            self.start_single_account(username)
            
    def start_single_account(self, username):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞"""

        account = self.accounts[username]

        # üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
        account['status_indicator'].configure(text_color=self.colors['success'])
        account['status_label'].configure(text="Running")
        account['start_btn'].configure(text="‚è∏", fg_color=self.colors['warning'])
        account['is_running'] = True

        def run_bot():
            try:
                from utils import TargetDistributor
                from instagram_bot import InstagramBot

                # ‚úÖ 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞—Ä–≥–µ—Ç—ñ–≤
                all_targets = self.targets_text.get("1.0", "end").strip()
                parsed_targets = self.parse_targets(all_targets)

                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¢–Ü–õ–¨–ö–ò –≤–∏–±—Ä–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤ (–∑ –≥–∞–ª–æ—á–∫–∞–º–∏)
                selected_accounts = [username for username, acc in self.accounts.items() 
                                    if acc['checkbox'].get()]

                # ‚úÖ 2. –†–æ–∑–ø–æ–¥—ñ–ª —Ç–∞—Ä–≥–µ—Ç—ñ–≤ –º—ñ–∂ –∞–∫–∞—É–Ω—Ç–∞–º–∏ (—Ç—ñ–ª—å–∫–∏ 1 —Ä–∞–∑ –¥–ª—è –≤—Å—ñ—î—ó —Å–µ—Å—ñ—ó)
                if not hasattr(self, 'current_session_id'):
                    import uuid
                    self.current_session_id = str(uuid.uuid4())
                    
                if not hasattr(self, 'target_distributor') or not hasattr(self, 'last_session_id') or self.last_session_id != self.current_session_id:
                    from utils import TargetDistributor
                    distributor = TargetDistributor()
                    distributor.distribute_targets(parsed_targets, selected_accounts)
                    self.target_distributor = distributor
                    self.last_session_id = self.current_session_id
                    
                    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –≤ –ë–î
                    from utils import DatabaseManager
                    db = DatabaseManager()
                    db.save_target_distribution(self.current_session_id, distributor.distributions)
                else:
                    distributor = self.target_distributor

                targets_for_account = distributor.get_targets_for_account(username)
                # ‚úÖ 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞—Ä–≥–µ—Ç—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
                if not targets_for_account:
                    self.log_message(f"‚ö†Ô∏è –ù–µ–º–∞—î —Ç–∞—Ä–≥–µ—Ç—ñ–≤ –¥–ª—è –∞–∫–∞—É–Ω—Ç–∞ {username}", "warning")
                    # –ó—É–ø–∏–Ω—è—î–º–æ –∞–∫–∞—É–Ω—Ç
                    self.root.after(0, lambda: self.stop_single_account(username))
                    return

                # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ü–µ —Å–ø–∏—Å–æ–∫
                if not isinstance(targets_for_account, list):
                    targets_for_account = list(targets_for_account)

                self.log_message(f"üéØ –ê–∫–∞—É–Ω—Ç {username} –æ—Ç—Ä–∏–º–∞–≤ —Ç–∞—Ä–≥–µ—Ç–∏: {', '.join(targets_for_account)}", "info")
                # ‚úÖ 4. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥—ñ–π
                messages = self.get_messages()
                actions_config = {
                    'like_posts': self.like_posts_var.get(),
                    'like_stories': self.like_stories_var.get(),
                    'reply_stories': self.reply_stories_var.get(),
                    'send_direct_message': self.send_dm_var.get(),
                    'posts_count': self.posts_count_var.get()
                }

                # ‚úÖ 5. –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –±—Ä–∞—É–∑–µ—Ä–∞
                browser_type = self.browser_var.get()

                # ‚úÖ 6. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
                bot = InstagramBot(
                    username=username,
                    password=account['password'],
                    proxy=account['proxy'],
                    browser_type=browser_type
                )

                self.running_bots[username] = bot

                # ‚úÖ 7. –õ–æ–≥—É–≤–∞–Ω–Ω—è
                self.setup_bot_logging(bot, username)

                # ‚úÖ 8. –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
                success = bot.run_automation_multiple_users(targets_for_account, messages, actions_config)

                # ‚úÖ 9. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.update_account_stats(username, success)

            except Exception as e:
                self.log_message(f"‚ùå Error for {username}: {e}", "error")

            finally:
                # ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI
                self.root.after(0, lambda: self.stop_single_account(username))

        # üîÅ –ó–∞–ø—É—Å–∫ —É –ø–æ—Ç–æ—Ü—ñ
        self.bot_threads[username] = self.executor.submit(run_bot)

        # üî¢ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
        self.update_active_accounts_count()

        
    def stop_single_account(self, username):
        """–ó—É–ø–∏–Ω–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞"""
        if username not in self.accounts:
            return
            
        account = self.accounts[username]
        
        # –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞
        if username in self.running_bots:
            try:
                self.running_bots[username].close()
                del self.running_bots[username]
            except:
                pass
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
        account['status_indicator'].configure(text_color=self.colors['warning'])
        account['status_label'].configure(text="Stopped")
        account['start_btn'].configure(text="‚ñ∂", fg_color=self.colors['success'])
        account['is_running'] = False
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        account['activity_label'].configure(text=datetime.now().strftime("%H:%M:%S"))
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
        self.update_active_accounts_count()
        
    def start_all_accounts(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –≤–∏–±—Ä–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        selected_accounts = [username for username, acc in self.accounts.items() 
                           if acc['checkbox'].get() and not acc['is_running']]
        
        if not selected_accounts:
            messagebox.showwarning("Warning", "No accounts selected or all are already running!")
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
        max_parallel = self.limit_vars.get("Max parallel accounts", tk.IntVar(value=5)).get()
        if len(selected_accounts) > max_parallel:
            if not messagebox.askyesno("Warning", 
                f"You selected {len(selected_accounts)} accounts but the limit is {max_parallel}.\n"
                f"Only first {max_parallel} accounts will be started. Continue?"):
                return
            selected_accounts = selected_accounts[:max_parallel]
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–∂–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞
        for i, username in enumerate(selected_accounts):
            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø—É—Å–∫–∞–º–∏
            delay = i * 2  # 2 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –∑–∞–ø—É—Å–∫–∞–º–∏
            self.root.after(delay * 1000, lambda u=username: self.start_single_account(u))
            
    def stop_all_accounts(self):
        """–ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        active_accounts = [username for username, acc in self.accounts.items() 
                         if acc['is_running']]
        
        if not active_accounts:
            messagebox.showinfo("Info", "No active accounts to stop!")
            return
            
        for username in active_accounts:
            self.stop_single_account(username)
            
        self.log_message("‚èπÔ∏è All accounts stopped", "info")
    def reset_target_distribution(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ç–∞—Ä–≥–µ—Ç—ñ–≤ –¥–ª—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó"""
        if hasattr(self, 'target_distributor'):
            del self.target_distributor
        if hasattr(self, 'current_session_id'):
            del self.current_session_id
        if hasattr(self, 'last_session_id'):
            del self.last_session_id
        self.log_message("üîÑ –†–æ–∑–ø–æ–¥—ñ–ª —Ç–∞—Ä–≥–µ—Ç—ñ–≤ —Å–∫–∏–Ω—É—Ç–æ", "info")
    def distribute_targets_between_accounts(self):
            """–†–æ–∑–ø–æ–¥—ñ–ª —Ç–∞—Ä–≥–µ—Ç—ñ–≤ –º—ñ–∂ –≤–∏–±—Ä–∞–Ω–∏–º–∏ –∞–∫–∞—É–Ω—Ç–∞–º–∏"""
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞—Ä–≥–µ—Ç—ñ–≤
            all_targets = self.targets_text.get("1.0", "end").strip()
            parsed_targets = self.parse_targets(all_targets)
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤
            selected_accounts = [username for username, acc in self.accounts.items() 
                                if acc['checkbox'].get()]
            
            if not selected_accounts or not parsed_targets:
                return {}
            
            # –†–æ–∑–ø–æ–¥—ñ–ª —Ç–∞—Ä–≥–µ—Ç—ñ–≤
            from utils import TargetDistributor
            distributor = TargetDistributor()
            distributor.distribute_targets(parsed_targets, selected_accounts)
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –≤ –ª–æ–≥–∞—Ö
            for account in selected_accounts:
                targets = distributor.get_targets_for_account(account)
                self.log_message(f"üéØ {account}: {len(targets)} —Ç–∞—Ä–≥–µ—Ç—ñ–≤ - {', '.join(targets[:3])}{'...' if len(targets) > 3 else ''}", "info")
    
    def add_account_dialog(self):
        """–î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞"""
        dialog = ctk.CTkToplevel(self.root)
        dialog.title("Add New Account")
        dialog.geometry("400x350")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(dialog, text="‚ûï Add Instagram Account",
                    font=("Arial", 18, "bold")).pack(pady=20)
        
        # –ü–æ–ª—è –≤–≤–æ–¥—É
        fields_frame = ctk.CTkFrame(dialog, fg_color="transparent")
        fields_frame.pack(padx=30, pady=10)
        
        # Username
        ctk.CTkLabel(fields_frame, text="Username:").pack(anchor="w", pady=(10, 0))
        username_entry = ctk.CTkEntry(fields_frame, width=300, placeholder_text="Enter username")
        username_entry.pack(pady=(0, 10))
        
        # Password
        ctk.CTkLabel(fields_frame, text="Password:").pack(anchor="w")
        password_entry = ctk.CTkEntry(fields_frame, width=300, show="*", placeholder_text="Enter password")
        password_entry.pack(pady=(0, 10))
        
        # Proxy
        ctk.CTkLabel(fields_frame, text="Proxy (optional):").pack(anchor="w")
        proxy_entry = ctk.CTkEntry(fields_frame, width=300, placeholder_text="ip:port:user:pass")
        proxy_entry.pack(pady=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(dialog, fg_color="transparent")
        buttons_frame.pack()
        
        def add_account():
            username = username_entry.get().strip()
            password = password_entry.get().strip()
            proxy = proxy_entry.get().strip()
            
            if not username or not password:
                messagebox.showerror("Error", "Username and password are required!")
                return
                
            if username in self.accounts:
                messagebox.showerror("Error", "Account already exists!")
                return
                
            self.add_account_row(username, password, proxy)
            self.log_message(f"‚úÖ Account {username} added", "success")
            dialog.destroy()
        
        ctk.CTkButton(buttons_frame, text="Add Account",
                     command=add_account,
                     fg_color=self.colors['success']).pack(side="left", padx=5)
        
        ctk.CTkButton(buttons_frame, text="Cancel",
                     command=dialog.destroy,
                     fg_color=self.colors['error']).pack(side="left", padx=5)
        
    def remove_account(self, username):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞"""
        if messagebox.askyesno("Confirm", f"Remove account {username}?"):
            if username in self.accounts:
                # –ó—É–ø–∏–Ω–∫–∞ —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏–π
                if self.accounts[username]['is_running']:
                    self.stop_single_account(username)
                    
                # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ UI
                self.accounts[username]['row_frame'].destroy()
                del self.accounts[username]
                
                self.log_message(f"üóëÔ∏è Account {username} removed", "warning")
                
    def import_accounts_csv(self):
        """–Ü–º–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ CSV"""
        filename = filedialog.askopenfilename(
            title="Import Accounts CSV",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                import csv
                imported = 0
                
                with open(filename, 'r', encoding='utf-8') as f:
                    reader = csv.reader(f)
                    for row in reader:
                        if len(row) >= 2:
                            username = row[0].strip()
                            password = row[1].strip()
                            proxy = row[2].strip() if len(row) > 2 else ""
                            
                            if username and password and username not in self.accounts:
                                self.add_account_row(username, password, proxy)
                                imported += 1
                                
                self.log_message(f"‚úÖ Imported {imported} accounts", "success")
                messagebox.showinfo("Success", f"Imported {imported} accounts!")
                
            except Exception as e:
                messagebox.showerror("Error", f"Failed to import: {e}")
                
    def export_accounts(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        filename = filedialog.asksaveasfilename(
            title="Export Accounts",
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("JSON files", "*.json")]
        )
        
        if filename:
            try:
                if filename.endswith('.csv'):
                    import csv
                    with open(filename, 'w', newline='', encoding='utf-8') as f:
                        writer = csv.writer(f)
                        writer.writerow(['Username', 'Password', 'Proxy', 'Status'])
                        
                        for username, account in self.accounts.items():
                            status = "Active" if account['is_running'] else "Inactive"
                            writer.writerow([username, account['password'], 
                                          account['proxy'], status])
                else:
                    data = {}
                    for username, account in self.accounts.items():
                        data[username] = {
                            'password': account['password'],
                            'proxy': account['proxy'],
                            'is_running': account['is_running']
                        }
                        
                    with open(filename, 'w', encoding='utf-8') as f:
                        json.dump(data, f, indent=2)
                        
                messagebox.showinfo("Success", "Accounts exported successfully!")
                
            except Exception as e:
                messagebox.showerror("Error", f"Failed to export: {e}")
                
    def setup_log_tags(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö —Ç–µ–≥—ñ–≤ –¥–ª—è –ª–æ–≥—ñ–≤"""
        # –¢—É—Ç –±–∏ –±—É–ª–∏ —Ç–µ–≥–∏ –¥–ª—è Tkinter Text widget, –∞–ª–µ CTkTextbox –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —Ç–µ–≥–∏
        # –¢–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —î
        pass
        
    def log_message(self, message, level="info"):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –ª–æ–≥—ñ–≤"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –ï–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤
        level_emojis = {
            "info": "‚ÑπÔ∏è",
            "success": "‚úÖ",
            "warning": "‚ö†Ô∏è",
            "error": "‚ùå",
            "debug": "üîç"
        }
        
        emoji = level_emojis.get(level, "üìù")
        formatted_message = f"[{timestamp}] {emoji} {message}\n"
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –ª–æ–≥—ñ–≤
        if hasattr(self, 'logs_text'):
            self.logs_text.insert("end", formatted_message)
            self.logs_text.see("end")
            
    def setup_bot_logging(self, bot, username):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –±–æ—Ç–∞"""
        class GUILogHandler(logging.Handler):
            def __init__(self, gui_instance, username):
                super().__init__()
                self.gui = gui_instance
                self.username = username
                
            def emit(self, record):
                message = f"[{self.username}] {record.getMessage()}"
                level = record.levelname.lower()
                
                # –ú–∞–ø—ñ–Ω–≥ —Ä—ñ–≤–Ω—ñ–≤ –ª–æ–≥—É–≤–∞–Ω–Ω—è
                level_map = {
                    'debug': 'debug',
                    'info': 'info',
                    'warning': 'warning',
                    'error': 'error',
                    'critical': 'error'
                }
                
                gui_level = level_map.get(level, 'info')
                
                # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–µ—Ä–≥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                self.gui.message_queue.put((message, gui_level))
                
        handler = GUILogHandler(self, username)
        handler.setLevel(logging.INFO)
        bot.logger.addHandler(handler)
        
    def process_message_queue(self):
        """–û–±—Ä–æ–±–∫–∞ —á–µ—Ä–≥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            while not self.message_queue.empty():
                message, level = self.message_queue.get_nowait()
                self.log_message(message, level)
        except:
            pass
        finally:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 100–º—Å
            self.root.after(100, self.process_message_queue)
            
    def update_active_accounts_count(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        active_count = sum(1 for acc in self.accounts.values() if acc['is_running'])
        self.active_accounts_label.configure(text=f"üë• Active: {active_count}")
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ
        if hasattr(self, 'stat_labels') and "Active Accounts" in self.stat_labels:
            self.stat_labels["Active Accounts"].configure(text=str(active_count))
            
    def update_account_stats(self, username, success):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∞—É–Ω—Ç–∞"""
        if username in self.accounts:
            account = self.accounts[username]
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –¥—ñ–π
            current_actions = int(account['actions_label'].cget("text"))
            account['actions_label'].configure(text=str(current_actions + 1))
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if hasattr(self, 'total_actions_label'):
                current_total = int(self.total_actions_label.cget("text").split(": ")[1])
                self.total_actions_label.configure(text=f"‚ö° Actions: {current_total + 1}")
                
    def darken_color(self, color):
        """–ó–∞—Ç–µ–º–Ω–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –¥–ª—è hover –µ—Ñ–µ–∫—Ç—É"""
        # –ü—Ä–æ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è
        if color.startswith("#"):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è hex –≤ RGB, –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è –Ω–∞ 20%, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–∞–∑–∞–¥
            r = int(color[1:3], 16)
            g = int(color[3:5], 16)
            b = int(color[5:7], 16)
            
            r = int(r * 0.8)
            g = int(g * 0.8)
            b = int(b * 0.8)
            
            return f"#{r:02x}{g:02x}{b:02x}"
        return color
        
    # === –ú–ï–¢–û–î–ò –î–õ–Ø TARGETS ===
    
    def validate_targets(self):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ü—ñ–ª—å–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        content = self.targets_text.get("1.0", "end").strip()
        
        if not content:
            messagebox.showwarning("Warning", "No target users entered!")
            return
            
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        users = self.parse_targets(content)
        
        if not users:
            messagebox.showerror("Error", "No valid usernames found!")
            return
            
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞
        self.targets_count_label.configure(text=f"Count: {len(users)}")
        
        # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        result = f"‚úÖ Found {len(users)} valid users:\n\n"
        result += "\n".join([f"‚Ä¢ @{user}" for user in users[:10]])
        
        if len(users) > 10:
            result += f"\n... and {len(users) - 10} more"
            
        messagebox.showinfo("Validation Result", result)
        
    def parse_targets(self, content):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ü—ñ–ª—å–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        if not content:
            return []
            
        # –†—ñ–∑–Ω—ñ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á—ñ
        import re
        users = re.split(r'[,;\n\s]+', content)
        
        # –û—á–∏—â–µ–Ω–Ω—è
        cleaned = []
        for user in users:
            user = user.strip().replace('@', '')
            if user and re.match(r'^[a-zA-Z0-9._]+$', user):
                cleaned.append(user)
                
        return list(dict.fromkeys(cleaned))  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        
    def load_targets_from_file(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è targets –∑ —Ñ–∞–π–ª—É"""
        filename = filedialog.askopenfilename(
            title="Load Target Users",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                self.targets_text.delete("1.0", "end")
                self.targets_text.insert("1.0", content)
                
                # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
                users = self.parse_targets(content)
                self.targets_count_label.configure(text=f"Count: {len(users)}")
                
                self.log_message(f"‚úÖ Loaded {len(users)} target users", "success")
                
            except Exception as e:
                messagebox.showerror("Error", f"Failed to load file: {e}")
                
    def save_targets_to_file(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è targets —É —Ñ–∞–π–ª"""
        content = self.targets_text.get("1.0", "end").strip()
        
        if not content:
            messagebox.showwarning("Warning", "No targets to save!")
            return
            
        filename = filedialog.asksaveasfilename(
            title="Save Target Users",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                    
                messagebox.showinfo("Success", "Target users saved!")
                
            except Exception as e:
                messagebox.showerror("Error", f"Failed to save: {e}")
                
    # === –ú–ï–¢–û–î–ò –î–õ–Ø –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ===
        
    def load_messages(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        try:
            with open('multiline_messages.json', 'r', encoding='utf-8') as f:
                self.original_messages = json.load(f)
                
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            validated_messages = []
            for msg in self.original_messages:
                if isinstance(msg, str) and msg.strip():
                    validated_messages.append(msg)
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                    lines = msg.splitlines()
                    if len(lines) > 1:
                        self.log_message(f"üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {len(lines)} —Ä—è–¥–∫—ñ–≤", "info")
                        
            self.original_messages = validated_messages
                
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}", "warning")
            self.original_messages = [
                "Hi! üòä",
                "Great post! üëç",
                "Amazing content! üî•",
                """Hello! üòä
    Love your content!
    Keep it up! üí™""",
                """–ü—Ä–∏–≤—ñ—Ç! üåü
    –ß—É–¥–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç!
    –¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏! üëè"""
            ]
            
        self.refresh_messages_list()
        
    def refresh_messages_list(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        self.messages_listbox.delete(0, tk.END)
        
        for i, message in enumerate(self.original_messages):
            # –ö–æ—Ä–æ—Ç–∫–∏–π preview
            preview = message.split('\n')[0]
            if len(preview) > 50:
                preview = preview[:47] + "..."
            if '\n' in message:
                preview += " [multi-line]"
                
            self.messages_listbox.insert(tk.END, preview)
            
    def get_messages(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        if hasattr(self, 'original_messages'):
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–ø—ñ—é —Å–ø–∏—Å–∫—É, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª
            return self.original_messages.copy()
        else:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
            self.load_messages()
            return self.original_messages.copy()
        
    def on_message_select(self, event):
        """–í–∏–±—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É"""
        selection = self.messages_listbox.curselection()
        if selection and hasattr(self, 'original_messages'):
            index = selection[0]
            if index < len(self.original_messages):
                self.message_editor.delete("1.0", "end")
                self.message_editor.insert("1.0", self.original_messages[index])
                
    def add_message_dialog(self):
        """–î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        self.message_editor.delete("1.0", "end")
        self.message_editor.focus()
        self.log_message("Enter new message in the editor and click 'Save Message'", "info")
        
    def edit_message_dialog(self):
        """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        selection = self.messages_listbox.curselection()
        if not selection:
            messagebox.showwarning("Warning", "Select a message to edit!")
            return
            
        self.editing_index = selection[0]
        self.log_message("Edit the message and click 'Save Message'", "info")
        
    def save_current_message(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        message = self.message_editor.get("1.0", "end").strip()
        
        if not message:
            messagebox.showwarning("Warning", "Message cannot be empty!")
            return
            
        if hasattr(self, 'editing_index'):
            # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ
            self.original_messages[self.editing_index] = message
            del self.editing_index
        else:
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
            self.original_messages.append(message)
            
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        self.save_messages_to_file()
        self.refresh_messages_list()
        
        self.log_message("‚úÖ Message saved!", "success")
    
    def delete_message(self):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        selection = self.messages_listbox.curselection()
        if not selection:
            messagebox.showwarning("Warning", "Select a message to delete!")
            return
            
        if messagebox.askyesno("Confirm", "Delete selected message?"):
            index = selection[0]
            del self.original_messages[index]
            
            self.save_messages_to_file()
            self.refresh_messages_list()
            self.message_editor.delete("1.0", "end")
            
            self.log_message("üóëÔ∏è Message deleted", "warning")
            
    def save_messages_to_file(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ñ–∞–π–ª"""
        try:
            with open('multiline_messages.json', 'w', encoding='utf-8') as f:
                json.dump(self.original_messages, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.log_message(f"Error saving messages: {e}", "error")
            
    def import_messages(self):
        """–Ü–º–ø–æ—Ä—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Ñ–∞–π–ª—É"""
        filename = filedialog.askopenfilename(
            title="Import Messages",
            filetypes=[("JSON files", "*.json"), ("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                if filename.endswith('.json'):
                    with open(filename, 'r', encoding='utf-8') as f:
                        messages = json.load(f)
                else:
                    with open(filename, 'r', encoding='utf-8') as f:
                        content = f.read()
                        messages = content.split('\n\n')
                        
                self.original_messages.extend(messages)
                self.save_messages_to_file()
                self.refresh_messages_list()
                
                self.log_message(f"‚úÖ Imported {len(messages)} messages", "success")
                
            except Exception as e:
                messagebox.showerror("Error", f"Failed to import: {e}")
                
    def export_messages(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        if not self.original_messages:
            messagebox.showwarning("Warning", "No messages to export!")
            return
            
        filename = filedialog.asksaveasfilename(
            title="Export Messages",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("Text files", "*.txt")]
        )
        
        if filename:
            try:
                if filename.endswith('.json'):
                    with open(filename, 'w', encoding='utf-8') as f:
                        json.dump(self.original_messages, f, indent=2, ensure_ascii=False)
                else:
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write('\n\n'.join(self.original_messages))
                        
                messagebox.showinfo("Success", f"Exported {len(self.original_messages)} messages!")
                
            except Exception as e:
                messagebox.showerror("Error", f"Failed to export: {e}")
                
    def show_message_templates(self):
        """–ü–æ–∫–∞–∑ —à–∞–±–ª–æ–Ω—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        templates = {
            "Friendly": [
                "Hey! Love your content! üòä",
                "Amazing post! Keep it up! üëç",
                """Hi there! üëã
Your posts are incredible!
Would love to see more! üí´"""
            ],
            "Business": [
                """Hello! 
I'm reaching out regarding a potential collaboration.
Would you be interested in discussing? üìß""",
                "Great profile! Let's connect for business opportunities ü§ù"
            ],
            "Engagement": [
                "This is so inspiring! üåü",
                "Can't wait for your next post! üî•",
                "Your content always makes my day! ‚òÄÔ∏è"
            ]
        }
        
        dialog = ctk.CTkToplevel(self.root)
        dialog.title("Message Templates")
        dialog.geometry("500x600")
        dialog.transient(self.root)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(dialog, text="üìù Message Templates",
                    font=("Arial", 18, "bold")).pack(pady=10)
        
        # –°–∫—Ä–æ–ª–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        scroll_frame = ctk.CTkScrollableFrame(dialog)
        scroll_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        for category, messages in templates.items():
            # –ö–∞—Ç–µ–≥–æ—Ä—ñ—è
            category_frame = ctk.CTkFrame(scroll_frame, corner_radius=10)
            category_frame.pack(fill="x", pady=10)
            
            ctk.CTkLabel(category_frame, text=category,
                        font=("Arial", 14, "bold")).pack(padx=10, pady=5)
            
            for message in messages:
                msg_frame = ctk.CTkFrame(category_frame)
                msg_frame.pack(fill="x", padx=10, pady=5)
                
                # Preview –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                preview = message.replace('\n', ' ')[:50] + "..." if len(message) > 50 else message
                ctk.CTkLabel(msg_frame, text=preview,
                           font=("Arial", 10)).pack(side="left", padx=10)
                
                # –ö–Ω–æ–ø–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                ctk.CTkButton(msg_frame, text="Use",
                            command=lambda m=message: self.use_template(m, dialog),
                            width=60).pack(side="right", padx=10)
                            
    def use_template(self, message, dialog):
        """–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        self.original_messages.append(message)
        self.save_messages_to_file()
        self.refresh_messages_list()
        
        self.log_message("‚úÖ Template added to messages", "success")
        dialog.destroy()
        
    def insert_emoji(self, emoji):
        """–í—Å—Ç–∞–≤–∫–∞ –µ–º–æ–¥–∑—ñ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä"""
        self.message_editor.insert("insert", emoji)
        
    def preview_message(self):
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        message = self.message_editor.get("1.0", "end").strip()
        
        if not message:
            messagebox.showwarning("Warning", "Nothing to preview!")
            return
            
        dialog = ctk.CTkToplevel(self.root)
        dialog.title("Message Preview")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(dialog, text="üì± Instagram Message Preview",
                    font=("Arial", 16, "bold")).pack(pady=10)
        
        # –†–∞–º–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        msg_frame = ctk.CTkFrame(dialog, corner_radius=15,
                               fg_color=self.colors['primary_light'])
        msg_frame.pack(padx=20, pady=10, anchor="w")
        
        # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        ctk.CTkLabel(msg_frame, text=message,
                    font=("Arial", 12),
                    text_color="white",
                    justify="left").pack(padx=15, pady=10)
        
        # –ß–∞—Å
        time_label = ctk.CTkLabel(dialog, text=datetime.now().strftime("%H:%M"),
                                font=("Arial", 10),
                                text_color=self.colors['text_secondary'])
        time_label.pack(anchor="w", padx=25)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        ctk.CTkButton(dialog, text="Close",
                     command=dialog.destroy).pack(pady=20)
                     
    # === –Ü–ù–®–Ü –ú–ï–¢–û–î–ò ===
    
    def clear_logs(self):
        """–û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤"""
        if hasattr(self, 'logs_text'):
            self.logs_text.delete("1.0", "end")
            self.log_message("üìã Logs cleared", "info")
            
    def export_logs(self):
        """–ï–∫—Å–ø–æ—Ä—Ç –ª–æ–≥—ñ–≤"""
        if not hasattr(self, 'logs_text'):
            return
            
        content = self.logs_text.get("1.0", "end").strip()
        
        if not content:
            messagebox.showwarning("Warning", "No logs to export!")
            return
            
        filename = filedialog.asksaveasfilename(
            title="Export Logs",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                    
                messagebox.showinfo("Success", "Logs exported!")
                
            except Exception as e:
                messagebox.showerror("Error", f"Failed to export: {e}")
                
    def save_settings(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        try:
            settings = {
                'browser': self.default_browser_var.get(),
                'headless': self.headless_var.get(),
                'delays': {k: v.get() for k, v in self.delay_vars.items()},
                'limits': {k: v.get() for k, v in self.limit_vars.items()}
            }
            
            with open('bot_settings.json', 'w') as f:
                json.dump(settings, f, indent=2)
                
            self.log_message("‚úÖ Settings saved", "success")
            messagebox.showinfo("Success", "Settings saved successfully!")
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save settings: {e}")
            
    def reset_settings(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        if messagebox.askyesno("Confirm", "Reset all settings to defaults?"):
            # –°–∫–∏–¥–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
            self.default_browser_var.set("Chrome")
            self.headless_var.set(False)
            
            # –°–∫–∏–¥–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫
            defaults_delays = {
                "Min delay between actions": 2,
                "Max delay between actions": 5,
                "Delay between users": 30,
                "Human typing speed": 0.1
            }
            
            for key, value in defaults_delays.items():
                if key in self.delay_vars:
                    self.delay_vars[key].set(value)
                    
            # –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤
            defaults_limits = {
                "Max actions per day": 200,
                "Max users per session": 50,
                "Max parallel accounts": 5
            }
            
            for key, value in defaults_limits.items():
                if key in self.limit_vars:
                    self.limit_vars[key].set(value)
                    
            self.log_message("üîÑ Settings reset to defaults", "info")
            
    def show_statistics(self):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        self.notebook.set("üìä Monitoring")
        
    def refresh_all(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö"""
        self.update_active_accounts_count()
        self.log_message("üîÑ Data refreshed", "info")
        
    def open_settings(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        self.notebook.set("‚öôÔ∏è Settings")
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏"""
        self.log_message("üöÄ Instagram Bot Pro started", "success")
        self.log_message("üë• Multi-account automation ready", "info")
        self.log_message("üåê Browser switching enabled (Chrome/Dolphin)", "info")
        
        # –û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        self.root.mainloop()
        
    def on_closing(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        if self.running_bots:
            if messagebox.askyesno("Confirm", "Active bots are running. Stop all and exit?"):
                self.stop_all_accounts()
                time.sleep(1)  # –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                self.executor.shutdown(wait=False)
                self.root.destroy()
        else:
            self.executor.shutdown(wait=False)
            self.root.destroy()


# –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ CustomTkinter, —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
try:
    import customtkinter as ctk
except ImportError:
    print("CustomTkinter not installed. Installing...")
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "customtkinter"])
    import customtkinter as ctk

# Fallback –Ω–∞ —Å—Ç–∞—Ä—É –≤–µ—Ä—Å—ñ—é —è–∫—â–æ CustomTkinter –Ω–µ –ø—Ä–∞—Ü—é—î
def start_gui():
    try:
        app = InstagramBotGUI()
        app.run()
    except Exception as e:
        print(f"Error with modern GUI: {e}")
        print("Falling back to classic GUI...")
        # –¢—É—Ç –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—É –≤–µ—Ä—Å—ñ—é GUI
        from gui import InstagramBotGUI
        app = InstagramBotGUI()
        app.run()

if __name__ == "__main__":
    start_gui()